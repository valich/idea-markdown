/* The following code was generated by JFlex 1.4.3 on 12/11/14 3:59 PM */

package net.nicoulaj.idea.markdown.lang.lexer;

import net.nicoulaj.idea.markdown.lang.IElementType;
import net.nicoulaj.idea.markdown.lang.MarkdownTokenTypes;

import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/11/14 3:59 PM from the specification file
 * <tt>/Users/valich/work/valich-idea-markdown/src/main/java/net/nicoulaj/idea/markdown/lang/lexer/markdown.flex</tt>
 */
public class _MarkdownLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 10;
  public static final int AFTER_LINE_START = 6;
  public static final int TAG_START = 4;
  public static final int HTML_BLOCK = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 8;
  public static final int CODE_FENCE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\35\1\36\1\5\22\0\1\3\1\12\1\6"+
    "\1\37\3\45\1\10\1\46\1\42\1\40\1\41\1\44\1\13\1\34"+
    "\1\31\12\1\1\25\1\0\1\11\1\30\1\14\1\15\1\33\1\22"+
    "\1\16\1\20\1\21\17\16\1\23\6\16\1\17\1\7\1\24\1\32"+
    "\1\26\1\27\32\2\1\45\1\32\1\45\1\43\6\0\1\35\u1fa2\0"+
    "\2\35\udfd6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\2\1\1\2\1\3\3\1\1\4\7\1\3\5"+
    "\1\6\2\7\1\10\1\11\3\12\1\13\1\14\1\15"+
    "\1\16\1\7\2\17\1\3\2\17\1\20\1\21\1\22"+
    "\2\23\2\22\11\0\1\24\1\25\3\0\1\26\2\27"+
    "\1\0\1\27\4\0\1\27\1\30\1\0\1\26\1\0"+
    "\1\26\2\0\2\31\1\5\2\31\2\0\1\32\1\33"+
    "\6\0\3\34\3\0\2\22\12\0\1\27\6\0\1\32"+
    "\3\0\1\35\11\0\1\36\2\22\5\0\1\37\1\0"+
    "\1\25\2\0\3\40\2\41\1\0\1\40\13\0\4\42"+
    "\2\0\1\37\3\0\1\40\1\43\3\0\1\44\2\0"+
    "\1\45\3\0\1\35\5\0\1\44\26\0\1\44\22\0"+
    "\1\35\2\0\1\35\76\0\1\35\u0172\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u01ad\0\u0222"+
    "\0\u0249\0\u0270\0\u01ad\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333"+
    "\0\u035a\0\u0381\0\u03a8\0\u03cf\0\u03f6\0\u01ad\0\u01ad\0\u041d"+
    "\0\u0444\0\u046b\0\u01ad\0\u0492\0\u04b9\0\u01ad\0\u01ad\0\u01ad"+
    "\0\u04e0\0\u0507\0\u01ad\0\u052e\0\u0222\0\u0492\0\u04b9\0\u01ad"+
    "\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1\0\u0618\0\u063f\0\u0666"+
    "\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729\0\u0750\0\u01d4\0\u01ad"+
    "\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u01ad\0\u083a\0\u0861"+
    "\0\u0813\0\u0888\0\u08af\0\u08d6\0\u02e5\0\u08d6\0\u01ad\0\u08fd"+
    "\0\u0924\0\u094b\0\u01ad\0\u0972\0\u03cf\0\u01ad\0\u0999\0\u09c0"+
    "\0\u03cf\0\u09e7\0\u041d\0\u0a0e\0\u01ad\0\u0a35\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u01ad\0\u0b46\0\u0b1f\0\u0507"+
    "\0\u052e\0\u05a3\0\u0b6d\0\u0b94\0\u0bbb\0\u0be2\0\u0c09\0\u0c30"+
    "\0\u0c57\0\u0c7e\0\u0ca5\0\u0813\0\u0ccc\0\u0cf3\0\u0cf3\0\u0d1a"+
    "\0\u0d41\0\u0d68\0\u0924\0\u0d8f\0\u0db6\0\u0a0e\0\u0ddd\0\u0e04"+
    "\0\u0e2b\0\u01ad\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7\0\u0eee\0\u0f15"+
    "\0\u0f3c\0\u0f63\0\u0f8a\0\u01ad\0\u0fb1\0\u0fd8\0\u0bbb\0\u0be2"+
    "\0\u0fff\0\u1026\0\u104d\0\u01ad\0\u1074\0\u01ad\0\u109b\0\u10c2"+
    "\0\u01ad\0\u10e9\0\u10c2\0\u01ad\0\u1110\0\u1137\0\u0d8f\0\u115e"+
    "\0\u1185\0\u11ac\0\u11d3\0\u11fa\0\u1221\0\u1248\0\u126f\0\u1296"+
    "\0\u12bd\0\u12e4\0\u01ad\0\u130b\0\u057c\0\u12e4\0\u1332\0\u1359"+
    "\0\u1332\0\u1380\0\u13a7\0\u13ce\0\u109b\0\u01ad\0\u13f5\0\u141c"+
    "\0\u1443\0\u01ad\0\u146a\0\u1491\0\u01ad\0\u14b8\0\u14df\0\u1506"+
    "\0\u14b8\0\u152d\0\u1554\0\u157b\0\u15a2\0\u15c9\0\u0f15\0\u15f0"+
    "\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u1701\0\u1728"+
    "\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb\0\u1812\0\u1839\0\u1860"+
    "\0\u1887\0\u18ae\0\u18d5\0\u18fc\0\u1923\0\u14b8\0\u194a\0\u1971"+
    "\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34\0\u1a5b\0\u1a82\0\u1aa9"+
    "\0\u1ad0\0\u1af7\0\u1b1e\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u1be1"+
    "\0\u16da\0\u1c08\0\u1c2f\0\u1701\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb"+
    "\0\u1cf2\0\u1d19\0\u1d40\0\u1d67\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03"+
    "\0\u1e2a\0\u1e51\0\u1e78\0\u1e9f\0\u1ec6\0\u1eed\0\u1f14\0\u1f3b"+
    "\0\u1f62\0\u1f89\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c\0\u2073"+
    "\0\u209a\0\u20c1\0\u20e8\0\u210f\0\u2136\0\u215d\0\u2184\0\u21ab"+
    "\0\u21d2\0\u21f9\0\u2220\0\u2247\0\u226e\0\u2295\0\u22bc\0\u22e3"+
    "\0\u230a\0\u2331\0\u2358\0\u237f\0\u23a6\0\u23cd\0\u23f4\0\u241b"+
    "\0\u2442\0\u2469\0\u2490\0\u24b7\0\u24de\0\u2505\0\u252c\0\u2553"+
    "\0\u257a\0\u25a1\0\u21ab\0\u25c8\0\u25ef\0\u2616\0\u263d\0\u2664"+
    "\0\u268b\0\u26b2\0\u26d9\0\u2700\0\u2727\0\u274e\0\u2775\0\u279c"+
    "\0\u27c3\0\u27ea\0\u2811\0\u2838\0\u285f\0\u2886\0\u28ad\0\u28d4"+
    "\0\u28fb\0\u2922\0\u2949\0\u2970\0\u2997\0\u29be\0\u29e5\0\u2a0c"+
    "\0\u2a33\0\u2a5a\0\u2a81\0\u2aa8\0\u2acf\0\u2af6\0\u2b1d\0\u2b44"+
    "\0\u2b6b\0\u2b92\0\u2bb9\0\u2be0\0\u2c07\0\u2c2e\0\u2c55\0\u2c7c"+
    "\0\u2ca3\0\u2cca\0\u2cf1\0\u2d18\0\u2d3f\0\u2d66\0\u2d8d\0\u2db4"+
    "\0\u2ddb\0\u2e02\0\u2e29\0\u2e50\0\u2e77\0\u2e9e\0\u2ec5\0\u2eec"+
    "\0\u2f13\0\u2f3a\0\u2f61\0\u2f88\0\u2faf\0\u2fd6\0\u2ffd\0\u3024"+
    "\0\u304b\0\u3072\0\u3099\0\u30c0\0\u30e7\0\u310e\0\u3135\0\u315c"+
    "\0\u3183\0\u31aa\0\u31d1\0\u31f8\0\u321f\0\u3246\0\u326d\0\u3294"+
    "\0\u32bb\0\u32e2\0\u3309\0\u3330\0\u3357\0\u337e\0\u33a5\0\u33cc"+
    "\0\u33f3\0\u341a\0\u3441\0\u3468\0\u348f\0\u34b6\0\u34dd\0\u3504"+
    "\0\u352b\0\u3552\0\u3579\0\u35a0\0\u35c7\0\u35ee\0\u3615\0\u363c"+
    "\0\u3663\0\u368a\0\u36b1\0\u36d8\0\u36ff\0\u3726\0\u374d\0\u3774"+
    "\0\u379b\0\u37c2\0\u37e9\0\u3810\0\u3837\0\u385e\0\u3885\0\u38ac"+
    "\0\u38d3\0\u38fa\0\u3921\0\u3948\0\u396f\0\u3996\0\u39bd\0\u39e4"+
    "\0\u3a0b\0\u3a32\0\u3a59\0\u3a80\0\u3aa7\0\u3ace\0\u3af5\0\u3b1c"+
    "\0\u3b43\0\u3b6a\0\u3b91\0\u3bb8\0\u3bdf\0\u3c06\0\u3c2d\0\u3c54"+
    "\0\u3c7b\0\u3ca2\0\u3cc9\0\u3cf0\0\u3d17\0\u3d3e\0\u3d65\0\u3d8c"+
    "\0\u3db3\0\u3dda\0\u3e01\0\u3e28\0\u3e4f\0\u3e76\0\u3e9d\0\u3ec4"+
    "\0\u3eeb\0\u3f12\0\u3f39\0\u3f60\0\u3f87\0\u3fae\0\u3fd5\0\u3ffc"+
    "\0\u4023\0\u404a\0\u4071\0\u4098\0\u40bf\0\u40e6\0\u410d\0\u4134"+
    "\0\u415b\0\u4182\0\u41a9\0\u41d0\0\u41f7\0\u421e\0\u4245\0\u426c"+
    "\0\u4293\0\u42ba\0\u42e1\0\u4308\0\u432f\0\u4356\0\u437d\0\u43a4"+
    "\0\u43cb\0\u43f2\0\u4419\0\u4440\0\u4467\0\u448e\0\u44b5\0\u44dc"+
    "\0\u4503\0\u452a\0\u4551\0\u4578\0\u459f\0\u45c6\0\u45ed\0\u4614"+
    "\0\u463b\0\u4662\0\u4689\0\u46b0\0\u46d7\0\u46fe\0\u4725\0\u474c"+
    "\0\u4773\0\u479a\0\u47c1\0\u47e8\0\u480f\0\u4836\0\u485d\0\u4884"+
    "\0\u48ab\0\u48d2\0\u48f9\0\u4920\0\u4947\0\u496e\0\u4995\0\u49bc"+
    "\0\u49e3\0\u4a0a\0\u4a31\0\u4a58\0\u4a7f\0\u4aa6\0\u4acd\0\u4af4"+
    "\0\u4b1b\0\u4b42\0\u4b69\0\u4b90\0\u4bb7\0\u4bde\0\u4c05\0\u4c2c"+
    "\0\u4c53\0\u4c7a\0\u4ca1\0\u4cc8\0\u4cef\0\u4d16\0\u4d3d\0\u4d64"+
    "\0\u4d8b\0\u4db2\0\u4dd9\0\u4e00\0\u4e27\0\u4e4e\0\u4e75\0\u4e9c"+
    "\0\u4ec3\0\u4eea\0\u4f11\0\u4f38\0\u4f5f\0\u4f86\0\u4fad\0\u4fd4"+
    "\0\u4ffb\0\u5022\0\u5049\0\u5070\0\u5097\0\u50be\0\u50e5\0\u510c"+
    "\0\u5133\0\u515a\0\u5181\0\u51a8\0\u51cf\0\u51f6\0\u521d\0\u5244"+
    "\0\u526b\0\u5292\0\u52b9\0\u52e0\0\u5307\0\u532e\0\u5355\0\u537c"+
    "\0\u53a3\0\u53ca\0\u53f1\0\u5418\0\u543f\0\u5466\0\u548d\0\u54b4"+
    "\0\u54db\0\u5502\0\u5529\0\u5550\0\u5577\0\u559e\0\u55c5\0\u55ec"+
    "\0\u5613\0\u563a\0\u5661\0\u5688\0\u56af\0\u56d6\0\u56fd\0\u5724"+
    "\0\u574b\0\u5772\0\u5799\0\u57c0\0\u57e7\0\u580e\0\u5835\0\u585c"+
    "\0\u5883\0\u58aa\0\u58d1\0\u58f8\0\u591f\0\u5946\0\u596d\0\u5994"+
    "\0\u59bb\0\u59e2\0\u5a09\0\u5a30\0\u5a57\0\u5a7e\0\u5aa5\0\u5acc"+
    "\0\u5af3\0\u5b1a\0\u5b41\0\u5b68\0\u5b8f\0\u5bb6\0\u5bdd\0\u5c04"+
    "\0\u5c2b\0\u5c52\0\u5c79\0\u5ca0\0\u5cc7\0\u5cee\0\u5d15\0\u5d3c"+
    "\0\u5d63\0\u5d8a\0\u5db1\0\u5dd8\0\u5dff";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\1\15\1\14\1\16\1\17\1\20\3\14\1\21"+
    "\1\14\1\22\1\23\11\14\1\24\1\25\1\26\5\14"+
    "\1\16\1\27\1\30\1\31\1\14\1\32\3\14\4\33"+
    "\1\34\1\35\41\33\4\36\1\0\42\36\1\37\2\40"+
    "\1\41\2\42\1\43\1\44\1\43\1\45\1\46\1\37"+
    "\1\43\1\37\1\40\1\43\4\40\1\43\1\47\1\50"+
    "\1\51\6\37\1\41\1\52\1\50\1\37\1\43\3\37"+
    "\1\43\3\53\1\54\1\17\1\55\1\53\1\56\1\53"+
    "\1\57\14\53\1\50\1\51\6\53\1\54\1\53\1\50"+
    "\6\53\4\60\2\61\41\60\3\62\1\60\1\63\1\64"+
    "\21\62\1\65\6\62\1\60\4\62\1\66\3\62\13\0"+
    "\1\67\14\0\1\70\22\0\1\71\1\72\27\0\2\72"+
    "\37\0\1\73\13\0\1\74\7\0\1\75\1\76\111\0"+
    "\1\77\32\0\1\100\5\0\1\100\7\0\1\16\1\17"+
    "\1\55\30\0\1\16\14\0\1\17\44\0\1\101\7\0"+
    "\1\102\2\0\1\103\1\101\1\0\4\101\5\0\1\104"+
    "\20\0\1\105\1\106\1\107\5\0\1\110\21\0\1\106"+
    "\1\111\36\0\1\112\47\0\1\113\22\0\1\114\1\106"+
    "\1\107\22\0\1\115\4\0\1\106\1\116\13\0\1\117"+
    "\32\0\1\117\1\120\12\0\1\121\32\0\1\121\1\0"+
    "\1\122\11\0\1\123\32\0\1\123\53\0\1\124\3\0"+
    "\4\33\1\0\42\33\3\0\1\125\1\126\1\127\30\0"+
    "\1\125\10\0\3\33\1\130\1\131\1\132\30\33\1\130"+
    "\10\33\1\0\2\40\1\133\12\0\1\40\1\0\4\40"+
    "\12\0\1\133\13\0\1\41\2\42\20\0\1\134\7\0"+
    "\1\41\1\0\1\134\11\0\3\42\30\0\1\42\17\0"+
    "\1\135\1\0\4\135\2\0\1\135\4\0\3\135\1\136"+
    "\1\0\1\135\1\0\2\135\2\0\10\135\1\0\1\137"+
    "\1\140\5\0\1\137\1\0\1\141\1\137\1\0\1\142"+
    "\1\140\1\0\4\140\2\0\3\137\1\143\1\137\1\0"+
    "\1\137\2\0\3\137\1\0\1\137\1\0\1\137\30\0"+
    "\1\51\22\0\1\144\1\145\1\146\27\0\1\145\1\147"+
    "\1\150\12\0\1\151\22\0\1\134\7\0\1\151\1\0"+
    "\1\134\11\0\3\61\30\0\1\61\10\0\3\62\3\0"+
    "\30\62\1\0\10\62\3\0\1\152\10\0\1\63\21\0"+
    "\1\152\13\0\1\152\1\63\7\0\1\63\21\0\1\152"+
    "\10\0\3\62\3\0\21\62\1\153\6\62\1\0\13\62"+
    "\3\0\30\62\1\0\4\62\1\154\3\62\13\0\1\67"+
    "\63\0\1\70\21\0\1\72\1\0\1\72\30\0\1\72"+
    "\13\0\1\72\32\0\1\72\37\0\1\155\62\0\1\156"+
    "\3\0\4\76\1\0\22\76\1\0\23\76\2\0\21\76"+
    "\1\0\17\76\1\0\2\101\13\0\1\101\1\0\4\101"+
    "\36\0\1\157\2\0\1\160\1\161\4\160\23\0\15\103"+
    "\1\162\31\103\2\0\1\163\13\0\1\163\1\0\4\163"+
    "\26\0\1\164\1\106\1\107\5\0\1\165\21\0\1\106"+
    "\1\111\14\0\1\106\45\0\1\166\1\106\1\107\5\0"+
    "\1\110\21\0\1\106\1\167\36\0\1\170\47\0\1\171"+
    "\22\0\1\114\1\106\1\107\27\0\1\106\1\116\13\0"+
    "\1\117\32\0\1\117\1\172\12\0\1\173\32\0\1\173"+
    "\1\0\1\122\11\0\1\122\32\0\1\122\1\0\1\174"+
    "\51\0\1\175\7\0\1\126\42\0\3\33\1\130\1\126"+
    "\1\132\30\33\1\130\14\33\1\126\42\33\3\0\1\176"+
    "\32\0\1\176\37\0\1\136\20\0\2\137\5\0\1\137"+
    "\1\0\2\137\1\0\2\137\1\0\4\137\2\0\5\137"+
    "\1\177\1\137\2\0\3\137\1\0\1\137\1\0\1\137"+
    "\2\0\1\200\1\140\1\201\4\0\1\137\1\0\2\137"+
    "\1\202\1\137\1\140\1\0\4\140\1\0\1\203\3\137"+
    "\1\204\1\137\1\177\1\137\1\0\1\201\3\137\1\0"+
    "\1\137\1\0\1\137\2\0\2\137\5\0\1\137\1\0"+
    "\1\137\1\205\1\0\1\137\1\206\1\207\4\206\2\0"+
    "\5\137\1\177\1\137\2\0\3\137\1\0\1\137\1\0"+
    "\1\137\1\0\1\210\2\142\5\210\1\142\1\210\2\142"+
    "\1\210\1\211\1\142\1\210\4\142\2\210\5\142\1\212"+
    "\1\142\2\210\3\142\1\210\1\142\1\210\1\142\1\210"+
    "\1\0\1\137\1\213\5\0\1\137\1\0\2\137\1\0"+
    "\1\137\1\213\1\0\4\213\2\0\5\137\1\177\1\137"+
    "\2\0\3\137\1\0\1\137\1\0\1\137\4\0\1\144"+
    "\1\145\1\146\27\0\1\145\1\147\14\0\1\214\42\0"+
    "\3\62\3\0\21\62\1\215\6\62\1\0\13\62\3\0"+
    "\30\62\1\0\4\62\1\216\3\62\27\0\1\217\62\0"+
    "\1\220\16\0\1\221\36\0\1\222\12\0\1\160\1\0"+
    "\4\160\12\0\1\222\30\0\1\223\26\0\14\103\1\224"+
    "\32\103\1\0\2\163\1\225\10\0\1\226\1\0\1\163"+
    "\1\0\4\163\12\0\1\225\13\0\1\165\7\0\1\227"+
    "\22\0\1\165\13\0\1\166\1\106\1\107\5\0\1\227"+
    "\21\0\1\106\1\167\13\0\1\230\1\231\1\232\20\0"+
    "\1\170\6\0\1\231\1\233\10\0\4\175\1\234\1\235"+
    "\21\175\1\171\17\175\3\0\1\117\32\0\1\117\1\236"+
    "\12\0\1\174\1\231\1\232\27\0\1\231\1\237\1\0"+
    "\1\174\6\0\4\175\1\234\1\235\21\175\1\0\17\175"+
    "\1\0\2\240\13\0\1\240\1\0\4\240\24\0\2\200"+
    "\1\201\4\0\1\137\1\0\2\137\1\202\1\137\1\200"+
    "\1\0\4\200\2\0\3\137\1\204\1\137\1\177\1\137"+
    "\1\0\1\201\3\137\1\0\1\137\1\0\1\137\3\0"+
    "\1\241\1\201\7\0\1\241\1\202\1\0\1\241\1\0"+
    "\4\241\1\0\1\241\3\0\1\242\4\0\1\201\10\0"+
    "\3\243\2\0\4\243\1\0\2\243\1\0\21\243\1\0"+
    "\10\243\1\0\2\137\5\0\1\137\1\0\2\137\1\202"+
    "\2\137\1\0\4\137\2\0\5\137\1\177\1\137\2\0"+
    "\3\137\1\0\1\137\1\0\1\137\2\0\2\137\5\0"+
    "\1\137\1\0\1\137\1\244\1\0\2\137\1\0\4\137"+
    "\2\0\5\137\1\177\1\137\2\0\3\137\1\0\1\137"+
    "\1\0\1\137\2\0\2\137\1\245\4\0\1\137\1\0"+
    "\2\137\1\0\1\137\1\206\1\0\4\206\2\0\5\137"+
    "\1\177\1\137\1\0\1\245\3\137\1\0\1\137\1\0"+
    "\1\137\21\0\1\246\26\0\15\210\1\247\32\210\2\142"+
    "\5\210\1\142\1\210\2\142\1\202\2\142\1\210\4\142"+
    "\2\210\5\142\1\212\1\142\2\210\3\142\1\210\1\142"+
    "\1\210\1\142\2\210\2\250\12\210\1\247\1\250\1\210"+
    "\4\250\23\210\1\0\2\213\1\251\4\0\1\137\1\0"+
    "\2\137\1\202\1\137\1\213\1\0\4\213\2\0\5\137"+
    "\1\177\1\137\1\0\1\251\3\137\1\0\1\137\1\0"+
    "\1\137\1\0\3\62\1\252\1\253\1\254\21\62\1\215"+
    "\5\62\1\255\1\256\13\62\1\252\1\253\1\254\27\62"+
    "\1\255\1\256\4\62\1\216\3\62\13\257\1\260\1\261"+
    "\32\257\3\262\1\263\10\262\1\0\21\262\1\263\10\262"+
    "\21\0\1\264\30\0\1\225\10\0\1\226\21\0\1\225"+
    "\13\0\1\227\1\231\1\232\5\0\1\227\21\0\1\231"+
    "\1\265\13\0\1\230\1\231\1\232\27\0\1\231\1\233"+
    "\14\0\1\266\46\0\1\234\45\0\1\117\32\0\1\117"+
    "\1\267\10\0\2\270\10\0\1\271\1\272\1\0\1\270"+
    "\1\0\4\270\10\0\1\177\13\0\2\241\1\273\7\0"+
    "\1\241\1\202\1\0\1\241\1\0\4\241\1\0\2\241"+
    "\1\0\1\274\1\242\2\0\1\241\1\0\1\273\24\0"+
    "\1\202\32\0\3\243\2\0\4\243\1\0\2\243\1\275"+
    "\21\243\1\0\10\243\1\276\2\277\5\276\1\277\1\276"+
    "\1\277\1\300\1\301\2\277\1\276\4\277\2\276\5\277"+
    "\1\302\1\277\2\276\3\277\1\276\1\277\1\276\1\277"+
    "\1\276\3\242\1\303\10\242\1\0\21\242\1\303\10\242"+
    "\21\0\1\304\25\0\14\210\1\202\33\210\2\305\10\210"+
    "\1\306\1\307\1\247\1\305\1\210\4\305\10\210\1\212"+
    "\12\210\3\0\1\251\10\0\1\202\21\0\1\251\13\0"+
    "\1\252\1\253\1\254\27\0\1\253\1\256\14\0\1\253"+
    "\42\0\13\257\1\310\46\257\1\262\1\261\32\257\14\0"+
    "\1\224\32\0\3\262\1\263\10\262\1\224\21\262\1\263"+
    "\10\262\22\0\1\311\27\0\1\117\32\0\1\117\1\312"+
    "\10\0\2\313\10\0\1\314\1\272\1\0\1\313\1\0"+
    "\4\313\10\0\1\177\13\0\2\313\10\0\1\314\2\0"+
    "\1\313\1\0\4\313\25\0\1\241\1\273\7\0\1\241"+
    "\1\202\1\0\1\241\1\0\4\241\1\0\1\241\2\0"+
    "\1\274\1\242\4\0\1\273\10\0\3\315\1\274\2\0"+
    "\1\316\1\315\1\317\1\0\2\315\1\0\12\315\2\0"+
    "\5\315\1\274\10\315\13\276\1\320\34\276\2\277\5\276"+
    "\1\277\1\276\1\277\1\321\1\276\2\277\1\276\4\277"+
    "\2\276\5\277\1\302\1\277\2\276\3\277\1\276\1\277"+
    "\1\276\1\277\2\276\2\277\5\276\1\277\1\276\1\277"+
    "\1\204\1\301\2\277\1\276\4\277\2\276\5\277\1\302"+
    "\1\277\2\276\3\277\1\276\1\277\1\276\1\277\2\276"+
    "\2\322\10\276\1\320\2\276\1\322\1\276\4\322\23\276"+
    "\3\242\1\303\10\242\1\202\21\242\1\303\10\242\22\0"+
    "\1\323\24\0\1\210\2\324\10\210\1\325\1\307\1\247"+
    "\1\324\1\210\4\324\10\210\1\212\13\210\2\324\10\210"+
    "\1\325\1\210\1\247\1\324\1\210\4\324\23\210\13\257"+
    "\1\262\33\257\23\0\1\326\26\0\1\117\32\0\1\117"+
    "\11\0\2\327\10\0\1\330\1\272\1\0\1\327\1\0"+
    "\4\327\10\0\1\177\13\0\2\327\10\0\1\330\2\0"+
    "\1\327\1\0\4\327\23\0\3\315\1\201\3\0\1\315"+
    "\2\0\2\315\1\202\12\315\2\0\5\315\1\201\10\315"+
    "\4\316\1\0\1\316\1\331\1\332\37\316\4\317\1\0"+
    "\2\317\1\333\1\331\36\317\13\276\1\242\34\276\2\277"+
    "\5\276\1\277\1\276\1\277\1\204\1\276\2\277\1\276"+
    "\4\277\2\276\5\277\1\302\1\277\2\276\3\277\1\276"+
    "\1\277\1\276\1\277\2\276\2\334\10\276\1\335\1\336"+
    "\1\276\1\334\1\276\4\334\10\276\1\302\12\276\23\0"+
    "\1\337\23\0\1\210\2\340\10\210\1\341\1\307\1\247"+
    "\1\340\1\210\4\340\10\210\1\212\13\210\2\340\10\210"+
    "\1\341\1\210\1\247\1\340\1\210\4\340\23\210\22\0"+
    "\1\342\25\0\2\343\10\0\1\344\1\272\1\0\1\343"+
    "\1\0\4\343\10\0\1\177\13\0\2\343\10\0\1\344"+
    "\2\0\1\343\1\0\4\343\26\0\1\201\10\0\1\202"+
    "\14\0\1\242\4\0\1\201\10\0\4\316\1\0\1\316"+
    "\1\345\1\332\37\316\4\317\1\0\2\317\1\333\1\346"+
    "\36\317\1\276\2\347\10\276\1\350\1\336\1\276\1\347"+
    "\1\276\4\347\10\276\1\302\13\276\2\347\10\276\1\351"+
    "\2\276\1\347\1\276\4\347\23\276\22\0\1\352\24\0"+
    "\1\210\2\353\10\210\1\354\1\307\1\247\1\353\1\210"+
    "\4\353\10\210\1\212\13\210\2\353\10\210\1\354\1\210"+
    "\1\247\1\353\1\210\4\353\23\210\17\0\1\355\30\0"+
    "\2\356\10\0\1\357\1\272\1\0\1\356\1\0\4\356"+
    "\10\0\1\177\13\0\2\356\10\0\1\357\2\0\1\356"+
    "\1\0\4\356\23\0\3\316\1\360\1\0\1\316\1\331"+
    "\1\332\4\316\1\361\14\316\1\362\4\316\1\360\10\316"+
    "\3\317\1\363\1\0\2\317\1\333\1\331\3\317\1\364"+
    "\14\317\1\365\4\317\1\363\10\317\1\276\2\366\10\276"+
    "\1\367\1\336\1\276\1\366\1\276\4\366\10\276\1\302"+
    "\13\276\2\366\10\276\1\370\2\276\1\366\1\276\4\366"+
    "\23\276\1\0\2\327\10\0\1\330\1\202\1\0\1\327"+
    "\1\0\4\327\42\0\1\371\27\0\1\210\2\372\10\210"+
    "\1\373\1\307\1\247\1\372\1\210\4\372\10\210\1\212"+
    "\13\210\2\372\10\210\1\373\1\210\1\247\1\372\1\210"+
    "\4\372\23\210\24\355\1\374\22\355\1\0\2\375\10\0"+
    "\1\376\1\272\1\0\1\375\1\0\4\375\10\0\1\177"+
    "\13\0\2\375\10\0\1\376\2\0\1\375\1\0\4\375"+
    "\23\0\2\316\1\377\1\360\1\0\1\316\1\331\1\332"+
    "\3\316\1\377\1\361\1\316\1\377\1\316\4\377\1\316"+
    "\1\377\3\316\1\362\4\316\1\360\14\316\1\0\1\316"+
    "\1\331\1\332\4\316\1\361\32\316\2\317\1\u0100\1\363"+
    "\1\0\2\317\1\333\1\331\2\317\1\u0100\1\364\1\317"+
    "\1\u0100\1\317\4\u0100\1\317\1\u0100\3\317\1\365\4\317"+
    "\1\363\14\317\1\0\2\317\1\333\1\331\3\317\1\364"+
    "\32\317\1\276\2\u0101\10\276\1\u0102\1\336\1\276\1\u0101"+
    "\1\276\4\u0101\10\276\1\302\13\276\2\u0101\10\276\1\u0103"+
    "\2\276\1\u0101\1\276\4\u0101\23\276\1\0\2\343\10\0"+
    "\1\344\1\202\1\0\1\343\1\0\4\343\23\0\24\371"+
    "\1\u0104\22\371\1\210\2\u0105\10\210\1\u0106\1\307\1\247"+
    "\1\u0105\1\210\4\u0105\10\210\1\212\13\210\2\u0105\10\210"+
    "\1\u0106\1\210\1\247\1\u0105\1\210\4\u0105\23\210\24\355"+
    "\1\u0107\22\355\1\0\2\u0108\10\0\1\u0109\1\272\1\0"+
    "\1\u0108\1\0\4\u0108\10\0\1\177\13\0\2\u0108\10\0"+
    "\1\u0109\2\0\1\u0108\1\0\4\u0108\23\0\1\316\2\377"+
    "\1\u010a\1\0\1\316\1\331\1\332\3\316\1\377\1\361"+
    "\1\316\1\377\1\316\4\377\1\316\2\377\1\316\1\u010b"+
    "\1\362\2\316\1\377\1\316\1\u010a\10\316\1\317\2\u0100"+
    "\1\u010c\1\0\2\317\1\333\1\331\2\317\1\u0100\1\364"+
    "\1\317\1\u0100\1\317\4\u0100\1\317\2\u0100\1\317\1\u010d"+
    "\1\365\2\317\1\u0100\1\317\1\u010c\10\317\1\276\2\u010e"+
    "\10\276\1\u010f\1\336\1\276\1\u010e\1\276\4\u010e\10\276"+
    "\1\302\13\276\2\u010e\10\276\1\u0110\2\276\1\u010e\1\276"+
    "\4\u010e\23\276\1\0\2\356\10\0\1\357\1\202\1\0"+
    "\1\356\1\0\4\356\23\0\24\371\1\u0111\22\371\1\210"+
    "\2\u0112\10\210\1\u0113\1\307\1\247\1\u0112\1\210\4\u0112"+
    "\10\210\1\212\13\210\2\u0112\10\210\1\u0113\1\210\1\247"+
    "\1\u0112\1\210\4\u0112\23\210\14\355\1\224\32\355\1\0"+
    "\2\u0114\10\0\1\u0115\1\272\1\0\1\u0114\1\0\4\u0114"+
    "\10\0\1\177\13\0\2\u0114\10\0\1\u0115\2\0\1\u0114"+
    "\1\0\4\u0114\23\0\2\316\1\377\1\u010a\1\0\1\316"+
    "\1\331\1\332\3\316\1\377\1\361\1\316\1\377\1\316"+
    "\4\377\1\316\1\377\2\316\1\u010b\1\362\4\316\1\u010a"+
    "\10\316\3\u0116\1\u010b\1\0\1\316\1\345\1\u0117\1\u0118"+
    "\1\316\2\u0116\1\316\12\u0116\2\316\5\u0116\1\u010b\10\u0116"+
    "\2\317\1\u0100\1\u010c\1\0\2\317\1\333\1\331\2\317"+
    "\1\u0100\1\364\1\317\1\u0100\1\317\4\u0100\1\317\1\u0100"+
    "\2\317\1\u010d\1\365\4\317\1\u010c\10\317\3\u0119\1\u010d"+
    "\1\0\1\317\1\u0118\1\u011a\1\346\1\317\2\u0119\1\317"+
    "\12\u0119\2\317\5\u0119\1\u010d\10\u0119\1\276\2\u011b\10\276"+
    "\1\u011c\1\336\1\276\1\u011b\1\276\4\u011b\10\276\1\302"+
    "\13\276\2\u011b\10\276\1\u011d\2\276\1\u011b\1\276\4\u011b"+
    "\23\276\1\0\2\375\10\0\1\376\1\202\1\0\1\375"+
    "\1\0\4\375\23\0\14\371\1\202\32\371\1\210\2\u011e"+
    "\10\210\1\u011f\1\307\1\247\1\u011e\1\210\4\u011e\10\210"+
    "\1\212\13\210\2\u011e\10\210\1\u011f\1\210\1\247\1\u011e"+
    "\1\210\4\u011e\23\210\1\0\2\u0120\10\0\1\u0121\1\272"+
    "\1\0\1\u0120\1\0\4\u0120\10\0\1\177\13\0\2\u0120"+
    "\10\0\1\u0121\2\0\1\u0120\1\0\4\u0120\23\0\3\u0116"+
    "\1\360\1\0\1\316\1\331\1\u0117\2\316\2\u0116\1\361"+
    "\12\u0116\2\316\5\u0116\1\360\13\u0116\1\360\1\0\1\316"+
    "\1\345\1\u0117\2\316\2\u0116\1\361\12\u0116\2\316\5\u0116"+
    "\1\360\10\u0116\4\u0118\1\0\1\u0118\1\346\1\u0122\1\345"+
    "\36\u0118\3\u0119\1\363\1\0\2\317\1\u011a\1\331\1\317"+
    "\2\u0119\1\364\12\u0119\2\317\5\u0119\1\363\13\u0119\1\363"+
    "\1\0\2\317\1\u011a\1\346\1\317\2\u0119\1\364\12\u0119"+
    "\2\317\5\u0119\1\363\10\u0119\1\276\2\u0123\10\276\1\u0124"+
    "\1\336\1\276\1\u0123\1\276\4\u0123\10\276\1\302\13\276"+
    "\2\u0123\10\276\1\u0125\2\276\1\u0123\1\276\4\u0123\23\276"+
    "\1\0\2\u0108\10\0\1\u0109\1\202\1\0\1\u0108\1\0"+
    "\4\u0108\23\0\1\210\2\u0126\10\210\1\u0127\1\307\1\247"+
    "\1\u0126\1\210\4\u0126\10\210\1\212\13\210\2\u0126\10\210"+
    "\1\u0127\1\210\1\247\1\u0126\1\210\4\u0126\23\210\1\0"+
    "\2\u0128\10\0\1\u0129\1\272\1\0\1\u0128\1\0\4\u0128"+
    "\10\0\1\177\13\0\2\u0128\10\0\1\u0129\2\0\1\u0128"+
    "\1\0\4\u0128\23\0\4\u0118\1\0\1\u0118\1\u012a\1\u0122"+
    "\1\u012a\36\u0118\1\276\2\u012b\10\276\1\u012c\1\336\1\276"+
    "\1\u012b\1\276\4\u012b\10\276\1\302\13\276\2\u012b\10\276"+
    "\1\u012d\2\276\1\u012b\1\276\4\u012b\23\276\1\0\2\u0114"+
    "\10\0\1\u0115\1\202\1\0\1\u0114\1\0\4\u0114\23\0"+
    "\1\210\2\u012e\10\210\1\u012f\1\307\1\247\1\u012e\1\210"+
    "\4\u012e\10\210\1\212\13\210\2\u012e\10\210\1\u012f\1\210"+
    "\1\247\1\u012e\1\210\4\u012e\23\210\1\0\2\u0130\10\0"+
    "\1\u0131\1\272\1\0\1\u0130\1\0\4\u0130\10\0\1\177"+
    "\13\0\2\u0130\10\0\1\u0131\2\0\1\u0130\1\0\4\u0130"+
    "\23\0\3\u0118\1\u0132\1\0\1\u0118\1\346\1\u0122\1\345"+
    "\3\u0118\1\u0133\14\u0118\1\u0134\4\u0118\1\u0132\10\u0118\1\276"+
    "\2\u0135\10\276\1\u0136\1\336\1\276\1\u0135\1\276\4\u0135"+
    "\10\276\1\302\13\276\2\u0135\10\276\1\u0137\2\276\1\u0135"+
    "\1\276\4\u0135\23\276\1\0\2\u0120\10\0\1\u0121\1\202"+
    "\1\0\1\u0120\1\0\4\u0120\23\0\1\210\2\u0138\10\210"+
    "\1\u0139\1\307\1\247\1\u0138\1\210\4\u0138\10\210\1\212"+
    "\13\210\2\u0138\10\210\1\u0139\1\210\1\247\1\u0138\1\210"+
    "\4\u0138\23\210\1\0\2\u013a\10\0\1\u013b\1\272\1\0"+
    "\1\u013a\1\0\4\u013a\10\0\1\177\13\0\2\u013a\10\0"+
    "\1\u013b\2\0\1\u013a\1\0\4\u013a\23\0\2\u0118\1\u013c"+
    "\1\u0132\1\0\1\u0118\1\346\1\u0122\1\345\2\u0118\1\u013c"+
    "\1\u0133\1\u0118\1\u013c\1\u0118\4\u013c\1\u0118\1\u013c\3\u0118"+
    "\1\u0134\4\u0118\1\u0132\14\u0118\1\0\1\u0118\1\346\1\u0122"+
    "\1\345\3\u0118\1\u0133\32\u0118\1\276\2\u013d\10\276\1\u013e"+
    "\1\336\1\276\1\u013d\1\276\4\u013d\10\276\1\302\13\276"+
    "\2\u013d\10\276\1\u013f\2\276\1\u013d\1\276\4\u013d\23\276"+
    "\1\0\2\u0128\10\0\1\u0129\1\202\1\0\1\u0128\1\0"+
    "\4\u0128\23\0\1\210\2\u0140\10\210\1\u0141\1\307\1\247"+
    "\1\u0140\1\210\4\u0140\10\210\1\212\13\210\2\u0140\10\210"+
    "\1\u0141\1\210\1\247\1\u0140\1\210\4\u0140\23\210\1\0"+
    "\2\u0142\10\0\1\u0143\1\272\1\0\1\u0142\1\0\4\u0142"+
    "\10\0\1\177\13\0\2\u0142\10\0\1\u0143\2\0\1\u0142"+
    "\1\0\4\u0142\23\0\1\u0118\2\u013c\1\u0144\1\0\1\u0118"+
    "\1\346\1\u0122\1\345\2\u0118\1\u013c\1\u0133\1\u0118\1\u013c"+
    "\1\u0118\4\u013c\1\u0118\2\u013c\1\u0118\1\u0145\1\u0134\2\u0118"+
    "\1\u013c\1\u0118\1\u0144\10\u0118\1\276\2\u0146\10\276\1\u0147"+
    "\1\336\1\276\1\u0146\1\276\4\u0146\10\276\1\302\13\276"+
    "\2\u0146\10\276\1\u0148\2\276\1\u0146\1\276\4\u0146\23\276"+
    "\1\0\2\u0130\10\0\1\u0131\1\202\1\0\1\u0130\1\0"+
    "\4\u0130\23\0\1\210\2\u0149\10\210\1\u014a\1\307\1\247"+
    "\1\u0149\1\210\4\u0149\10\210\1\212\13\210\2\u0149\10\210"+
    "\1\u014a\1\210\1\247\1\u0149\1\210\4\u0149\23\210\1\0"+
    "\2\u014b\10\0\1\u014c\1\272\1\0\1\u014b\1\0\4\u014b"+
    "\10\0\1\177\13\0\2\u014b\10\0\1\u014c\2\0\1\u014b"+
    "\1\0\4\u014b\23\0\2\u0118\1\u013c\1\u0144\1\0\1\u0118"+
    "\1\346\1\u0122\1\345\2\u0118\1\u013c\1\u0133\1\u0118\1\u013c"+
    "\1\u0118\4\u013c\1\u0118\1\u013c\2\u0118\1\u0145\1\u0134\4\u0118"+
    "\1\u0144\10\u0118\3\u014d\1\u0145\1\0\1\u0118\1\u012a\1\u014e"+
    "\1\u012a\1\u0118\2\u014d\1\u0118\12\u014d\2\u0118\5\u014d\1\u0145"+
    "\10\u014d\1\276\2\u014f\10\276\1\u0150\1\336\1\276\1\u014f"+
    "\1\276\4\u014f\10\276\1\302\13\276\2\u014f\10\276\1\u0151"+
    "\2\276\1\u014f\1\276\4\u014f\23\276\1\0\2\u013a\10\0"+
    "\1\u013b\1\202\1\0\1\u013a\1\0\4\u013a\23\0\1\210"+
    "\2\u0152\10\210\1\u0153\1\307\1\247\1\u0152\1\210\4\u0152"+
    "\10\210\1\212\13\210\2\u0152\10\210\1\u0153\1\210\1\247"+
    "\1\u0152\1\210\4\u0152\23\210\1\0\2\u0154\10\0\1\u0155"+
    "\1\272\1\0\1\u0154\1\0\4\u0154\10\0\1\177\13\0"+
    "\2\u0154\10\0\1\u0155\2\0\1\u0154\1\0\4\u0154\23\0"+
    "\3\u014d\1\u0132\1\0\1\u0118\1\346\1\u014e\1\345\1\u0118"+
    "\2\u014d\1\u0133\12\u014d\2\u0118\5\u014d\1\u0132\13\u014d\1\u0132"+
    "\1\0\1\u0118\1\u012a\1\u014e\1\u012a\1\u0118\2\u014d\1\u0133"+
    "\12\u014d\2\u0118\5\u014d\1\u0132\10\u014d\1\276\2\u0156\10\276"+
    "\1\u0157\1\336\1\276\1\u0156\1\276\4\u0156\10\276\1\302"+
    "\13\276\2\u0156\10\276\1\u0158\2\276\1\u0156\1\276\4\u0156"+
    "\23\276\1\0\2\u0142\10\0\1\u0143\1\202\1\0\1\u0142"+
    "\1\0\4\u0142\23\0\1\210\2\u0159\10\210\1\u015a\1\307"+
    "\1\247\1\u0159\1\210\4\u0159\10\210\1\212\13\210\2\u0159"+
    "\10\210\1\u015a\1\210\1\247\1\u0159\1\210\4\u0159\23\210"+
    "\1\0\2\u015b\10\0\1\u015c\1\272\1\0\1\u015b\1\0"+
    "\4\u015b\10\0\1\177\13\0\2\u015b\10\0\1\u015c\2\0"+
    "\1\u015b\1\0\4\u015b\23\0\1\276\2\u015d\10\276\1\u015e"+
    "\1\336\1\276\1\u015d\1\276\4\u015d\10\276\1\302\13\276"+
    "\2\u015d\10\276\1\u015f\2\276\1\u015d\1\276\4\u015d\23\276"+
    "\1\0\2\u014b\10\0\1\u014c\1\202\1\0\1\u014b\1\0"+
    "\4\u014b\23\0\1\210\2\u0160\10\210\1\u0161\1\307\1\247"+
    "\1\u0160\1\210\4\u0160\10\210\1\212\13\210\2\u0160\10\210"+
    "\1\u0161\1\210\1\247\1\u0160\1\210\4\u0160\23\210\1\0"+
    "\2\u0162\10\0\1\u0163\1\272\1\0\1\u0162\1\0\4\u0162"+
    "\10\0\1\177\13\0\2\u0162\10\0\1\u0163\2\0\1\u0162"+
    "\1\0\4\u0162\23\0\1\276\2\u0164\10\276\1\u0165\1\336"+
    "\1\276\1\u0164\1\276\4\u0164\10\276\1\302\13\276\2\u0164"+
    "\10\276\1\u0166\2\276\1\u0164\1\276\4\u0164\23\276\1\0"+
    "\2\u0154\10\0\1\u0155\1\202\1\0\1\u0154\1\0\4\u0154"+
    "\23\0\1\210\2\u0167\10\210\1\u0168\1\307\1\247\1\u0167"+
    "\1\210\4\u0167\10\210\1\212\13\210\2\u0167\10\210\1\u0168"+
    "\1\210\1\247\1\u0167\1\210\4\u0167\23\210\1\0\2\u0169"+
    "\10\0\1\u016a\1\272\1\0\1\u0169\1\0\4\u0169\10\0"+
    "\1\177\13\0\2\u0169\10\0\1\u016a\2\0\1\u0169\1\0"+
    "\4\u0169\23\0\1\276\2\u016b\10\276\1\u016c\1\336\1\276"+
    "\1\u016b\1\276\4\u016b\10\276\1\302\13\276\2\u016b\10\276"+
    "\1\u016d\2\276\1\u016b\1\276\4\u016b\23\276\1\0\2\u015b"+
    "\10\0\1\u015c\1\202\1\0\1\u015b\1\0\4\u015b\23\0"+
    "\1\210\2\u016e\10\210\1\u016f\1\307\1\247\1\u016e\1\210"+
    "\4\u016e\10\210\1\212\13\210\2\u016e\10\210\1\u016f\1\210"+
    "\1\247\1\u016e\1\210\4\u016e\23\210\1\0\2\u0170\10\0"+
    "\1\u0171\1\272\1\0\1\u0170\1\0\4\u0170\10\0\1\177"+
    "\13\0\2\u0170\10\0\1\u0171\2\0\1\u0170\1\0\4\u0170"+
    "\23\0\1\276\2\u0172\10\276\1\u0173\1\336\1\276\1\u0172"+
    "\1\276\4\u0172\10\276\1\302\13\276\2\u0172\10\276\1\u0174"+
    "\2\276\1\u0172\1\276\4\u0172\23\276\1\0\2\u0162\10\0"+
    "\1\u0163\1\202\1\0\1\u0162\1\0\4\u0162\23\0\1\210"+
    "\2\u0175\10\210\1\u0176\1\307\1\247\1\u0175\1\210\4\u0175"+
    "\10\210\1\212\13\210\2\u0175\10\210\1\u0176\1\210\1\247"+
    "\1\u0175\1\210\4\u0175\23\210\1\0\2\u0177\10\0\1\u0178"+
    "\1\272\1\0\1\u0177\1\0\4\u0177\10\0\1\177\13\0"+
    "\2\u0177\10\0\1\u0178\2\0\1\u0177\1\0\4\u0177\23\0"+
    "\1\276\2\u0179\10\276\1\u017a\1\336\1\276\1\u0179\1\276"+
    "\4\u0179\10\276\1\302\13\276\2\u0179\10\276\1\u017b\2\276"+
    "\1\u0179\1\276\4\u0179\23\276\1\0\2\u0169\10\0\1\u016a"+
    "\1\202\1\0\1\u0169\1\0\4\u0169\23\0\1\210\2\u017c"+
    "\10\210\1\u017d\1\307\1\247\1\u017c\1\210\4\u017c\10\210"+
    "\1\212\13\210\2\u017c\10\210\1\u017d\1\210\1\247\1\u017c"+
    "\1\210\4\u017c\23\210\1\0\2\u017e\10\0\1\u017f\1\272"+
    "\1\0\1\u017e\1\0\4\u017e\10\0\1\177\13\0\2\u017e"+
    "\10\0\1\u017f\2\0\1\u017e\1\0\4\u017e\23\0\1\276"+
    "\2\u0180\10\276\1\u0181\1\336\1\276\1\u0180\1\276\4\u0180"+
    "\10\276\1\302\13\276\2\u0180\10\276\1\u0182\2\276\1\u0180"+
    "\1\276\4\u0180\23\276\1\0\2\u0170\10\0\1\u0171\1\202"+
    "\1\0\1\u0170\1\0\4\u0170\23\0\1\210\2\u0183\10\210"+
    "\1\u0184\1\307\1\247\1\u0183\1\210\4\u0183\10\210\1\212"+
    "\13\210\2\u0183\10\210\1\u0184\1\210\1\247\1\u0183\1\210"+
    "\4\u0183\23\210\1\0\2\u0185\10\0\1\u0186\1\272\1\0"+
    "\1\u0185\1\0\4\u0185\10\0\1\177\13\0\2\u0185\10\0"+
    "\1\u0186\2\0\1\u0185\1\0\4\u0185\23\0\1\276\2\u0187"+
    "\10\276\1\u0188\1\336\1\276\1\u0187\1\276\4\u0187\10\276"+
    "\1\302\13\276\2\u0187\10\276\1\u0189\2\276\1\u0187\1\276"+
    "\4\u0187\23\276\1\0\2\u0177\10\0\1\u0178\1\202\1\0"+
    "\1\u0177\1\0\4\u0177\23\0\1\210\2\u018a\10\210\1\u018b"+
    "\1\307\1\247\1\u018a\1\210\4\u018a\10\210\1\212\13\210"+
    "\2\u018a\10\210\1\u018b\1\210\1\247\1\u018a\1\210\4\u018a"+
    "\23\210\1\0\2\u018c\10\0\1\u018d\1\272\1\0\1\u018c"+
    "\1\0\4\u018c\10\0\1\177\13\0\2\u018c\10\0\1\u018d"+
    "\2\0\1\u018c\1\0\4\u018c\23\0\1\276\2\u018e\10\276"+
    "\1\u018f\1\336\1\276\1\u018e\1\276\4\u018e\10\276\1\302"+
    "\13\276\2\u018e\10\276\1\u0190\2\276\1\u018e\1\276\4\u018e"+
    "\23\276\1\0\2\u017e\10\0\1\u017f\1\202\1\0\1\u017e"+
    "\1\0\4\u017e\23\0\1\210\2\u0191\10\210\1\u0192\1\307"+
    "\1\247\1\u0191\1\210\4\u0191\10\210\1\212\13\210\2\u0191"+
    "\10\210\1\u0192\1\210\1\247\1\u0191\1\210\4\u0191\23\210"+
    "\1\0\2\u0193\10\0\1\u0194\1\272\1\0\1\u0193\1\0"+
    "\4\u0193\10\0\1\177\13\0\2\u0193\10\0\1\u0194\2\0"+
    "\1\u0193\1\0\4\u0193\23\0\1\276\2\u0195\10\276\1\u0196"+
    "\1\336\1\276\1\u0195\1\276\4\u0195\10\276\1\302\13\276"+
    "\2\u0195\10\276\1\u0197\2\276\1\u0195\1\276\4\u0195\23\276"+
    "\1\0\2\u0185\10\0\1\u0186\1\202\1\0\1\u0185\1\0"+
    "\4\u0185\23\0\1\210\2\u0198\10\210\1\u0199\1\307\1\247"+
    "\1\u0198\1\210\4\u0198\10\210\1\212\13\210\2\u0198\10\210"+
    "\1\u0199\1\210\1\247\1\u0198\1\210\4\u0198\23\210\1\0"+
    "\2\u019a\10\0\1\u019b\1\272\1\0\1\u019a\1\0\4\u019a"+
    "\10\0\1\177\13\0\2\u019a\10\0\1\u019b\2\0\1\u019a"+
    "\1\0\4\u019a\23\0\1\276\2\u019c\10\276\1\u019d\1\336"+
    "\1\276\1\u019c\1\276\4\u019c\10\276\1\302\13\276\2\u019c"+
    "\10\276\1\u019e\2\276\1\u019c\1\276\4\u019c\23\276\1\0"+
    "\2\u018c\10\0\1\u018d\1\202\1\0\1\u018c\1\0\4\u018c"+
    "\23\0\1\210\2\u019f\10\210\1\u01a0\1\307\1\247\1\u019f"+
    "\1\210\4\u019f\10\210\1\212\13\210\2\u019f\10\210\1\u01a0"+
    "\1\210\1\247\1\u019f\1\210\4\u019f\23\210\1\0\2\u01a1"+
    "\10\0\1\u01a2\1\272\1\0\1\u01a1\1\0\4\u01a1\10\0"+
    "\1\177\13\0\2\u01a1\10\0\1\u01a2\2\0\1\u01a1\1\0"+
    "\4\u01a1\23\0\1\276\2\u01a3\10\276\1\u01a4\1\336\1\276"+
    "\1\u01a3\1\276\4\u01a3\10\276\1\302\13\276\2\u01a3\10\276"+
    "\1\u01a5\2\276\1\u01a3\1\276\4\u01a3\23\276\1\0\2\u0193"+
    "\10\0\1\u0194\1\202\1\0\1\u0193\1\0\4\u0193\23\0"+
    "\1\210\2\u01a6\10\210\1\u01a7\1\307\1\247\1\u01a6\1\210"+
    "\4\u01a6\10\210\1\212\13\210\2\u01a6\10\210\1\u01a7\1\210"+
    "\1\247\1\u01a6\1\210\4\u01a6\23\210\1\0\2\u01a8\10\0"+
    "\1\u01a9\1\272\1\0\1\u01a8\1\0\4\u01a8\10\0\1\177"+
    "\13\0\2\u01a8\10\0\1\u01a9\2\0\1\u01a8\1\0\4\u01a8"+
    "\23\0\1\276\2\u01aa\10\276\1\u01ab\1\336\1\276\1\u01aa"+
    "\1\276\4\u01aa\10\276\1\302\13\276\2\u01aa\10\276\1\u01ac"+
    "\2\276\1\u01aa\1\276\4\u01aa\23\276\1\0\2\u019a\10\0"+
    "\1\u019b\1\202\1\0\1\u019a\1\0\4\u019a\23\0\1\210"+
    "\2\u01ad\10\210\1\u01ae\1\307\1\247\1\u01ad\1\210\4\u01ad"+
    "\10\210\1\212\13\210\2\u01ad\10\210\1\u01ae\1\210\1\247"+
    "\1\u01ad\1\210\4\u01ad\23\210\1\0\2\u01af\10\0\1\u01b0"+
    "\1\272\1\0\1\u01af\1\0\4\u01af\10\0\1\177\13\0"+
    "\2\u01af\10\0\1\u01b0\2\0\1\u01af\1\0\4\u01af\23\0"+
    "\1\276\2\u01b1\10\276\1\u01b2\1\336\1\276\1\u01b1\1\276"+
    "\4\u01b1\10\276\1\302\13\276\2\u01b1\10\276\1\u01b3\2\276"+
    "\1\u01b1\1\276\4\u01b1\23\276\1\0\2\u01a1\10\0\1\u01a2"+
    "\1\202\1\0\1\u01a1\1\0\4\u01a1\23\0\1\210\2\u01b4"+
    "\10\210\1\u01b5\1\307\1\247\1\u01b4\1\210\4\u01b4\10\210"+
    "\1\212\13\210\2\u01b4\10\210\1\u01b5\1\210\1\247\1\u01b4"+
    "\1\210\4\u01b4\23\210\1\0\2\u01b6\10\0\1\u01b7\1\272"+
    "\1\0\1\u01b6\1\0\4\u01b6\10\0\1\177\13\0\2\u01b6"+
    "\10\0\1\u01b7\2\0\1\u01b6\1\0\4\u01b6\23\0\1\276"+
    "\2\u01b8\10\276\1\u01b9\1\336\1\276\1\u01b8\1\276\4\u01b8"+
    "\10\276\1\302\13\276\2\u01b8\10\276\1\u01ba\2\276\1\u01b8"+
    "\1\276\4\u01b8\23\276\1\0\2\u01a8\10\0\1\u01a9\1\202"+
    "\1\0\1\u01a8\1\0\4\u01a8\23\0\1\210\2\u01bb\10\210"+
    "\1\u01bc\1\307\1\247\1\u01bb\1\210\4\u01bb\10\210\1\212"+
    "\13\210\2\u01bb\10\210\1\u01bc\1\210\1\247\1\u01bb\1\210"+
    "\4\u01bb\23\210\1\0\2\u01bd\10\0\1\u01be\1\272\1\0"+
    "\1\u01bd\1\0\4\u01bd\10\0\1\177\13\0\2\u01bd\10\0"+
    "\1\u01be\2\0\1\u01bd\1\0\4\u01bd\23\0\1\276\2\u01bf"+
    "\10\276\1\u01c0\1\336\1\276\1\u01bf\1\276\4\u01bf\10\276"+
    "\1\302\13\276\2\u01bf\10\276\1\u01c1\2\276\1\u01bf\1\276"+
    "\4\u01bf\23\276\1\0\2\u01af\10\0\1\u01b0\1\202\1\0"+
    "\1\u01af\1\0\4\u01af\23\0\1\210\2\u01c2\10\210\1\u01c3"+
    "\1\307\1\247\1\u01c2\1\210\4\u01c2\10\210\1\212\13\210"+
    "\2\u01c2\10\210\1\u01c3\1\210\1\247\1\u01c2\1\210\4\u01c2"+
    "\23\210\1\0\2\u01c4\10\0\1\u01c5\1\272\1\0\1\u01c4"+
    "\1\0\4\u01c4\10\0\1\177\13\0\2\u01c4\10\0\1\u01c5"+
    "\2\0\1\u01c4\1\0\4\u01c4\23\0\1\276\2\u01c6\10\276"+
    "\1\u01c7\1\336\1\276\1\u01c6\1\276\4\u01c6\10\276\1\302"+
    "\13\276\2\u01c6\10\276\1\u01c8\2\276\1\u01c6\1\276\4\u01c6"+
    "\23\276\1\0\2\u01b6\10\0\1\u01b7\1\202\1\0\1\u01b6"+
    "\1\0\4\u01b6\23\0\1\210\2\u01c9\10\210\1\u01ca\1\307"+
    "\1\247\1\u01c9\1\210\4\u01c9\10\210\1\212\13\210\2\u01c9"+
    "\10\210\1\u01ca\1\210\1\247\1\u01c9\1\210\4\u01c9\23\210"+
    "\1\0\2\u01cb\10\0\1\u01cc\1\272\1\0\1\u01cb\1\0"+
    "\4\u01cb\10\0\1\177\13\0\2\u01cb\10\0\1\u01cc\2\0"+
    "\1\u01cb\1\0\4\u01cb\23\0\1\276\2\u01cd\10\276\1\u01ce"+
    "\1\336\1\276\1\u01cd\1\276\4\u01cd\10\276\1\302\13\276"+
    "\2\u01cd\10\276\1\u01cf\2\276\1\u01cd\1\276\4\u01cd\23\276"+
    "\1\0\2\u01bd\10\0\1\u01be\1\202\1\0\1\u01bd\1\0"+
    "\4\u01bd\23\0\1\210\2\u01d0\10\210\1\u01d1\1\307\1\247"+
    "\1\u01d0\1\210\4\u01d0\10\210\1\212\13\210\2\u01d0\10\210"+
    "\1\u01d1\1\210\1\247\1\u01d0\1\210\4\u01d0\23\210\1\0"+
    "\2\u01d2\10\0\1\u01d3\1\272\1\0\1\u01d2\1\0\4\u01d2"+
    "\10\0\1\177\13\0\2\u01d2\10\0\1\u01d3\2\0\1\u01d2"+
    "\1\0\4\u01d2\23\0\1\276\2\u01d4\10\276\1\u01d5\1\336"+
    "\1\276\1\u01d4\1\276\4\u01d4\10\276\1\302\13\276\2\u01d4"+
    "\10\276\1\u01d6\2\276\1\u01d4\1\276\4\u01d4\23\276\1\0"+
    "\2\u01c4\10\0\1\u01c5\1\202\1\0\1\u01c4\1\0\4\u01c4"+
    "\23\0\1\210\2\u01d7\10\210\1\u01d8\1\307\1\247\1\u01d7"+
    "\1\210\4\u01d7\10\210\1\212\13\210\2\u01d7\10\210\1\u01d8"+
    "\1\210\1\247\1\u01d7\1\210\4\u01d7\23\210\1\0\2\u01d9"+
    "\10\0\1\u01da\1\272\1\0\1\u01d9\1\0\4\u01d9\10\0"+
    "\1\177\13\0\2\u01d9\10\0\1\u01da\2\0\1\u01d9\1\0"+
    "\4\u01d9\23\0\1\276\2\u01db\10\276\1\u01dc\1\336\1\276"+
    "\1\u01db\1\276\4\u01db\10\276\1\302\13\276\2\u01db\10\276"+
    "\1\u01dd\2\276\1\u01db\1\276\4\u01db\23\276\1\0\2\u01cb"+
    "\10\0\1\u01cc\1\202\1\0\1\u01cb\1\0\4\u01cb\23\0"+
    "\1\210\2\u01de\10\210\1\u01df\1\307\1\247\1\u01de\1\210"+
    "\4\u01de\10\210\1\212\13\210\2\u01de\10\210\1\u01df\1\210"+
    "\1\247\1\u01de\1\210\4\u01de\23\210\1\0\2\u01e0\10\0"+
    "\1\u01e1\1\272\1\0\1\u01e0\1\0\4\u01e0\10\0\1\177"+
    "\13\0\2\u01e0\10\0\1\u01e1\2\0\1\u01e0\1\0\4\u01e0"+
    "\23\0\1\276\2\u01e2\10\276\1\u01e3\1\336\1\276\1\u01e2"+
    "\1\276\4\u01e2\10\276\1\302\13\276\2\u01e2\10\276\1\u01e4"+
    "\2\276\1\u01e2\1\276\4\u01e2\23\276\1\0\2\u01d2\10\0"+
    "\1\u01d3\1\202\1\0\1\u01d2\1\0\4\u01d2\23\0\1\210"+
    "\2\u01e5\10\210\1\u01e6\1\307\1\247\1\u01e5\1\210\4\u01e5"+
    "\10\210\1\212\13\210\2\u01e5\10\210\1\u01e6\1\210\1\247"+
    "\1\u01e5\1\210\4\u01e5\23\210\1\0\2\u01e7\10\0\1\u01e8"+
    "\1\272\1\0\1\u01e7\1\0\4\u01e7\10\0\1\177\13\0"+
    "\2\u01e7\10\0\1\u01e8\2\0\1\u01e7\1\0\4\u01e7\23\0"+
    "\1\276\2\u01e9\10\276\1\u01ea\1\336\1\276\1\u01e9\1\276"+
    "\4\u01e9\10\276\1\302\13\276\2\u01e9\10\276\1\u01eb\2\276"+
    "\1\u01e9\1\276\4\u01e9\23\276\1\0\2\u01d9\10\0\1\u01da"+
    "\1\202\1\0\1\u01d9\1\0\4\u01d9\23\0\1\210\2\u01ec"+
    "\10\210\1\u01ed\1\307\1\247\1\u01ec\1\210\4\u01ec\10\210"+
    "\1\212\13\210\2\u01ec\10\210\1\u01ed\1\210\1\247\1\u01ec"+
    "\1\210\4\u01ec\23\210\1\0\2\u01ee\10\0\1\u01ef\1\272"+
    "\1\0\1\u01ee\1\0\4\u01ee\10\0\1\177\13\0\2\u01ee"+
    "\10\0\1\u01ef\2\0\1\u01ee\1\0\4\u01ee\23\0\1\276"+
    "\2\u01f0\10\276\1\u01f1\1\336\1\276\1\u01f0\1\276\4\u01f0"+
    "\10\276\1\302\13\276\2\u01f0\10\276\1\u01f2\2\276\1\u01f0"+
    "\1\276\4\u01f0\23\276\1\0\2\u01e0\10\0\1\u01e1\1\202"+
    "\1\0\1\u01e0\1\0\4\u01e0\23\0\1\210\2\u01f3\10\210"+
    "\1\u01f4\1\307\1\247\1\u01f3\1\210\4\u01f3\10\210\1\212"+
    "\13\210\2\u01f3\10\210\1\u01f4\1\210\1\247\1\u01f3\1\210"+
    "\4\u01f3\23\210\1\0\2\u01f5\10\0\1\u01f6\1\272\1\0"+
    "\1\u01f5\1\0\4\u01f5\10\0\1\177\13\0\2\u01f5\10\0"+
    "\1\u01f6\2\0\1\u01f5\1\0\4\u01f5\23\0\1\276\2\u01f7"+
    "\10\276\1\u01f8\1\336\1\276\1\u01f7\1\276\4\u01f7\10\276"+
    "\1\302\13\276\2\u01f7\10\276\1\u01f9\2\276\1\u01f7\1\276"+
    "\4\u01f7\23\276\1\0\2\u01e7\10\0\1\u01e8\1\202\1\0"+
    "\1\u01e7\1\0\4\u01e7\23\0\1\210\2\u01fa\10\210\1\u01fb"+
    "\1\307\1\247\1\u01fa\1\210\4\u01fa\10\210\1\212\13\210"+
    "\2\u01fa\10\210\1\u01fb\1\210\1\247\1\u01fa\1\210\4\u01fa"+
    "\23\210\1\0\2\u01fc\10\0\1\u01fd\1\272\1\0\1\u01fc"+
    "\1\0\4\u01fc\10\0\1\177\13\0\2\u01fc\10\0\1\u01fd"+
    "\2\0\1\u01fc\1\0\4\u01fc\23\0\1\276\2\u01fe\10\276"+
    "\1\u01ff\1\336\1\276\1\u01fe\1\276\4\u01fe\10\276\1\302"+
    "\13\276\2\u01fe\10\276\1\u0200\2\276\1\u01fe\1\276\4\u01fe"+
    "\23\276\1\0\2\u01ee\10\0\1\u01ef\1\202\1\0\1\u01ee"+
    "\1\0\4\u01ee\23\0\1\210\2\u0201\10\210\1\u0202\1\307"+
    "\1\247\1\u0201\1\210\4\u0201\10\210\1\212\13\210\2\u0201"+
    "\10\210\1\u0202\1\210\1\247\1\u0201\1\210\4\u0201\23\210"+
    "\1\0\2\u0203\10\0\1\u0204\1\272\1\0\1\u0203\1\0"+
    "\4\u0203\10\0\1\177\13\0\2\u0203\10\0\1\u0204\2\0"+
    "\1\u0203\1\0\4\u0203\23\0\1\276\2\u0205\10\276\1\u0206"+
    "\1\336\1\276\1\u0205\1\276\4\u0205\10\276\1\302\13\276"+
    "\2\u0205\10\276\1\u0207\2\276\1\u0205\1\276\4\u0205\23\276"+
    "\1\0\2\u01f5\10\0\1\u01f6\1\202\1\0\1\u01f5\1\0"+
    "\4\u01f5\23\0\1\210\2\u0208\10\210\1\u0209\1\307\1\247"+
    "\1\u0208\1\210\4\u0208\10\210\1\212\13\210\2\u0208\10\210"+
    "\1\u0209\1\210\1\247\1\u0208\1\210\4\u0208\23\210\1\0"+
    "\2\u020a\10\0\1\u020b\1\272\1\0\1\u020a\1\0\4\u020a"+
    "\10\0\1\177\13\0\2\u020a\10\0\1\u020b\2\0\1\u020a"+
    "\1\0\4\u020a\23\0\1\276\2\u020c\10\276\1\u020d\1\336"+
    "\1\276\1\u020c\1\276\4\u020c\10\276\1\302\13\276\2\u020c"+
    "\10\276\1\u020e\2\276\1\u020c\1\276\4\u020c\23\276\1\0"+
    "\2\u01fc\10\0\1\u01fd\1\202\1\0\1\u01fc\1\0\4\u01fc"+
    "\23\0\1\210\2\u020f\10\210\1\u0210\1\307\1\247\1\u020f"+
    "\1\210\4\u020f\10\210\1\212\13\210\2\u020f\10\210\1\u0210"+
    "\1\210\1\247\1\u020f\1\210\4\u020f\23\210\1\0\2\u0211"+
    "\10\0\1\u0212\1\272\1\0\1\u0211\1\0\4\u0211\10\0"+
    "\1\177\13\0\2\u0211\10\0\1\u0212\2\0\1\u0211\1\0"+
    "\4\u0211\23\0\1\276\2\u0213\10\276\1\u0214\1\336\1\276"+
    "\1\u0213\1\276\4\u0213\10\276\1\302\13\276\2\u0213\10\276"+
    "\1\u0215\2\276\1\u0213\1\276\4\u0213\23\276\1\0\2\u0203"+
    "\10\0\1\u0204\1\202\1\0\1\u0203\1\0\4\u0203\23\0"+
    "\1\210\2\u0216\10\210\1\u0217\1\307\1\247\1\u0216\1\210"+
    "\4\u0216\10\210\1\212\13\210\2\u0216\10\210\1\u0217\1\210"+
    "\1\247\1\u0216\1\210\4\u0216\23\210\1\0\2\u0218\10\0"+
    "\1\u0219\1\272\1\0\1\u0218\1\0\4\u0218\10\0\1\177"+
    "\13\0\2\u0218\10\0\1\u0219\2\0\1\u0218\1\0\4\u0218"+
    "\23\0\1\276\2\u021a\10\276\1\u021b\1\336\1\276\1\u021a"+
    "\1\276\4\u021a\10\276\1\302\13\276\2\u021a\10\276\1\u021c"+
    "\2\276\1\u021a\1\276\4\u021a\23\276\1\0\2\u020a\10\0"+
    "\1\u020b\1\202\1\0\1\u020a\1\0\4\u020a\23\0\1\210"+
    "\2\u021d\10\210\1\u021e\1\307\1\247\1\u021d\1\210\4\u021d"+
    "\10\210\1\212\13\210\2\u021d\10\210\1\u021e\1\210\1\247"+
    "\1\u021d\1\210\4\u021d\23\210\1\0\2\u021f\10\0\1\u0220"+
    "\1\272\1\0\1\u021f\1\0\4\u021f\10\0\1\177\13\0"+
    "\2\u021f\10\0\1\u0220\2\0\1\u021f\1\0\4\u021f\23\0"+
    "\1\276\2\u0221\10\276\1\u0222\1\336\1\276\1\u0221\1\276"+
    "\4\u0221\10\276\1\302\13\276\2\u0221\10\276\1\u0223\2\276"+
    "\1\u0221\1\276\4\u0221\23\276\1\0\2\u0211\10\0\1\u0212"+
    "\1\202\1\0\1\u0211\1\0\4\u0211\23\0\1\210\2\u0224"+
    "\10\210\1\u0225\1\307\1\247\1\u0224\1\210\4\u0224\10\210"+
    "\1\212\13\210\2\u0224\10\210\1\u0225\1\210\1\247\1\u0224"+
    "\1\210\4\u0224\23\210\1\0\2\u0226\10\0\1\u0227\1\272"+
    "\1\0\1\u0226\1\0\4\u0226\10\0\1\177\13\0\2\u0226"+
    "\10\0\1\u0227\2\0\1\u0226\1\0\4\u0226\23\0\1\276"+
    "\2\u0228\10\276\1\u0229\1\336\1\276\1\u0228\1\276\4\u0228"+
    "\10\276\1\302\13\276\2\u0228\10\276\1\u022a\2\276\1\u0228"+
    "\1\276\4\u0228\23\276\1\0\2\u0218\10\0\1\u0219\1\202"+
    "\1\0\1\u0218\1\0\4\u0218\23\0\1\210\2\u022b\10\210"+
    "\1\u022c\1\307\1\247\1\u022b\1\210\4\u022b\10\210\1\212"+
    "\13\210\2\u022b\10\210\1\u022c\1\210\1\247\1\u022b\1\210"+
    "\4\u022b\23\210\1\0\2\u022d\10\0\1\u022e\1\272\1\0"+
    "\1\u022d\1\0\4\u022d\10\0\1\177\13\0\2\u022d\10\0"+
    "\1\u022e\2\0\1\u022d\1\0\4\u022d\23\0\1\276\2\u022f"+
    "\10\276\1\u0230\1\336\1\276\1\u022f\1\276\4\u022f\10\276"+
    "\1\302\13\276\2\u022f\10\276\1\u0231\2\276\1\u022f\1\276"+
    "\4\u022f\23\276\1\0\2\u021f\10\0\1\u0220\1\202\1\0"+
    "\1\u021f\1\0\4\u021f\23\0\1\210\2\u0232\10\210\1\u0233"+
    "\1\307\1\247\1\u0232\1\210\4\u0232\10\210\1\212\13\210"+
    "\2\u0232\10\210\1\u0233\1\210\1\247\1\u0232\1\210\4\u0232"+
    "\23\210\1\0\2\u0234\10\0\1\u0235\1\272\1\0\1\u0234"+
    "\1\0\4\u0234\10\0\1\177\13\0\2\u0234\10\0\1\u0235"+
    "\2\0\1\u0234\1\0\4\u0234\23\0\1\276\2\u0236\10\276"+
    "\1\u0237\1\336\1\276\1\u0236\1\276\4\u0236\10\276\1\302"+
    "\13\276\2\u0236\10\276\1\u0238\2\276\1\u0236\1\276\4\u0236"+
    "\23\276\1\0\2\u0226\10\0\1\u0227\1\202\1\0\1\u0226"+
    "\1\0\4\u0226\23\0\1\210\2\u0239\10\210\1\u023a\1\307"+
    "\1\247\1\u0239\1\210\4\u0239\10\210\1\212\13\210\2\u0239"+
    "\10\210\1\u023a\1\210\1\247\1\u0239\1\210\4\u0239\23\210"+
    "\1\0\2\u023b\10\0\1\u023c\1\272\1\0\1\u023b\1\0"+
    "\4\u023b\10\0\1\177\13\0\2\u023b\10\0\1\u023c\2\0"+
    "\1\u023b\1\0\4\u023b\23\0\1\276\2\u023d\10\276\1\u023e"+
    "\1\336\1\276\1\u023d\1\276\4\u023d\10\276\1\302\13\276"+
    "\2\u023d\10\276\1\u023f\2\276\1\u023d\1\276\4\u023d\23\276"+
    "\1\0\2\u022d\10\0\1\u022e\1\202\1\0\1\u022d\1\0"+
    "\4\u022d\23\0\1\210\2\u0240\10\210\1\u0241\1\307\1\247"+
    "\1\u0240\1\210\4\u0240\10\210\1\212\13\210\2\u0240\10\210"+
    "\1\u0241\1\210\1\247\1\u0240\1\210\4\u0240\23\210\1\0"+
    "\2\u0242\10\0\1\u0243\1\272\1\0\1\u0242\1\0\4\u0242"+
    "\10\0\1\177\13\0\2\u0242\10\0\1\u0243\2\0\1\u0242"+
    "\1\0\4\u0242\23\0\1\276\2\u0244\10\276\1\u0245\1\336"+
    "\1\276\1\u0244\1\276\4\u0244\10\276\1\302\13\276\2\u0244"+
    "\10\276\1\u0246\2\276\1\u0244\1\276\4\u0244\23\276\1\0"+
    "\2\u0234\10\0\1\u0235\1\202\1\0\1\u0234\1\0\4\u0234"+
    "\23\0\1\210\2\u0247\10\210\1\u0248\1\307\1\247\1\u0247"+
    "\1\210\4\u0247\10\210\1\212\13\210\2\u0247\10\210\1\u0248"+
    "\1\210\1\247\1\u0247\1\210\4\u0247\23\210\1\0\2\u0249"+
    "\10\0\1\u024a\1\272\1\0\1\u0249\1\0\4\u0249\10\0"+
    "\1\177\13\0\2\u0249\10\0\1\u024a\2\0\1\u0249\1\0"+
    "\4\u0249\23\0\1\276\2\u024b\10\276\1\u024c\1\336\1\276"+
    "\1\u024b\1\276\4\u024b\10\276\1\302\13\276\2\u024b\10\276"+
    "\1\u024d\2\276\1\u024b\1\276\4\u024b\23\276\1\0\2\u023b"+
    "\10\0\1\u023c\1\202\1\0\1\u023b\1\0\4\u023b\23\0"+
    "\1\210\2\u024e\10\210\1\u024f\1\307\1\247\1\u024e\1\210"+
    "\4\u024e\10\210\1\212\13\210\2\u024e\10\210\1\u024f\1\210"+
    "\1\247\1\u024e\1\210\4\u024e\23\210\1\0\2\u0250\10\0"+
    "\1\u0251\1\272\1\0\1\u0250\1\0\4\u0250\10\0\1\177"+
    "\13\0\2\u0250\10\0\1\u0251\2\0\1\u0250\1\0\4\u0250"+
    "\23\0\1\276\2\u0252\10\276\1\u0253\1\336\1\276\1\u0252"+
    "\1\276\4\u0252\10\276\1\302\13\276\2\u0252\10\276\1\u0254"+
    "\2\276\1\u0252\1\276\4\u0252\23\276\1\0\2\u0242\10\0"+
    "\1\u0243\1\202\1\0\1\u0242\1\0\4\u0242\23\0\1\210"+
    "\2\u0255\10\210\1\u0256\1\307\1\247\1\u0255\1\210\4\u0255"+
    "\10\210\1\212\13\210\2\u0255\10\210\1\u0256\1\210\1\247"+
    "\1\u0255\1\210\4\u0255\23\210\1\0\2\u0257\10\0\1\u0258"+
    "\1\272\1\0\1\u0257\1\0\4\u0257\10\0\1\177\13\0"+
    "\2\u0257\10\0\1\u0258\2\0\1\u0257\1\0\4\u0257\23\0"+
    "\1\276\2\u0259\10\276\1\u025a\1\336\1\276\1\u0259\1\276"+
    "\4\u0259\10\276\1\302\13\276\2\u0259\10\276\1\u025b\2\276"+
    "\1\u0259\1\276\4\u0259\23\276\1\0\2\u0249\10\0\1\u024a"+
    "\1\202\1\0\1\u0249\1\0\4\u0249\23\0\1\210\2\u025c"+
    "\10\210\1\u025d\1\307\1\247\1\u025c\1\210\4\u025c\10\210"+
    "\1\212\13\210\2\u025c\10\210\1\u025d\1\210\1\247\1\u025c"+
    "\1\210\4\u025c\23\210\1\0\2\u025e\10\0\1\u025f\1\272"+
    "\1\0\1\u025e\1\0\4\u025e\10\0\1\177\13\0\2\u025e"+
    "\10\0\1\u025f\2\0\1\u025e\1\0\4\u025e\23\0\1\276"+
    "\2\u0260\10\276\1\u0261\1\336\1\276\1\u0260\1\276\4\u0260"+
    "\10\276\1\302\13\276\2\u0260\10\276\1\u0262\2\276\1\u0260"+
    "\1\276\4\u0260\23\276\1\0\2\u0250\10\0\1\u0251\1\202"+
    "\1\0\1\u0250\1\0\4\u0250\23\0\1\210\2\u0263\10\210"+
    "\1\u0264\1\307\1\247\1\u0263\1\210\4\u0263\10\210\1\212"+
    "\13\210\2\u0263\10\210\1\u0264\1\210\1\247\1\u0263\1\210"+
    "\4\u0263\23\210\1\0\2\u0265\10\0\1\u0266\1\272\1\0"+
    "\1\u0265\1\0\4\u0265\10\0\1\177\13\0\2\u0265\10\0"+
    "\1\u0266\2\0\1\u0265\1\0\4\u0265\23\0\1\276\2\u0267"+
    "\10\276\1\u0268\1\336\1\276\1\u0267\1\276\4\u0267\10\276"+
    "\1\302\13\276\2\u0267\10\276\1\u0269\2\276\1\u0267\1\276"+
    "\4\u0267\23\276\1\0\2\u0257\10\0\1\u0258\1\202\1\0"+
    "\1\u0257\1\0\4\u0257\23\0\1\210\2\u026a\10\210\1\u026b"+
    "\1\307\1\247\1\u026a\1\210\4\u026a\10\210\1\212\13\210"+
    "\2\u026a\10\210\1\u026b\1\210\1\247\1\u026a\1\210\4\u026a"+
    "\23\210\1\0\2\u026c\10\0\1\u026d\1\272\1\0\1\u026c"+
    "\1\0\4\u026c\10\0\1\177\13\0\2\u026c\10\0\1\u026d"+
    "\2\0\1\u026c\1\0\4\u026c\23\0\1\276\2\u026e\10\276"+
    "\1\u026f\1\336\1\276\1\u026e\1\276\4\u026e\10\276\1\302"+
    "\13\276\2\u026e\10\276\1\u0270\2\276\1\u026e\1\276\4\u026e"+
    "\23\276\1\0\2\u025e\10\0\1\u025f\1\202\1\0\1\u025e"+
    "\1\0\4\u025e\23\0\1\210\2\u0271\10\210\1\u0272\1\307"+
    "\1\247\1\u0271\1\210\4\u0271\10\210\1\212\13\210\2\u0271"+
    "\10\210\1\u0272\1\210\1\247\1\u0271\1\210\4\u0271\23\210"+
    "\1\0\2\u0273\10\0\1\u0274\1\272\1\0\1\u0273\1\0"+
    "\4\u0273\10\0\1\177\13\0\2\u0273\10\0\1\u0274\2\0"+
    "\1\u0273\1\0\4\u0273\23\0\1\276\2\u0275\10\276\1\u0276"+
    "\1\336\1\276\1\u0275\1\276\4\u0275\10\276\1\302\13\276"+
    "\2\u0275\10\276\1\u0277\2\276\1\u0275\1\276\4\u0275\23\276"+
    "\1\0\2\u0265\10\0\1\u0266\1\202\1\0\1\u0265\1\0"+
    "\4\u0265\23\0\1\210\2\u0278\10\210\1\u0279\1\307\1\247"+
    "\1\u0278\1\210\4\u0278\10\210\1\212\13\210\2\u0278\10\210"+
    "\1\u0279\1\210\1\247\1\u0278\1\210\4\u0278\23\210\1\0"+
    "\2\u027a\10\0\1\u027b\1\272\1\0\1\u027a\1\0\4\u027a"+
    "\10\0\1\177\13\0\2\u027a\10\0\1\u027b\2\0\1\u027a"+
    "\1\0\4\u027a\23\0\1\276\2\u027c\10\276\1\u027d\1\336"+
    "\1\276\1\u027c\1\276\4\u027c\10\276\1\302\13\276\2\u027c"+
    "\10\276\1\u027e\2\276\1\u027c\1\276\4\u027c\23\276\1\0"+
    "\2\u026c\10\0\1\u026d\1\202\1\0\1\u026c\1\0\4\u026c"+
    "\23\0\1\210\2\u027f\10\210\1\u0280\1\307\1\247\1\u027f"+
    "\1\210\4\u027f\10\210\1\212\13\210\2\u027f\10\210\1\u0280"+
    "\1\210\1\247\1\u027f\1\210\4\u027f\23\210\1\0\2\u0281"+
    "\10\0\1\u0282\1\272\1\0\1\u0281\1\0\4\u0281\10\0"+
    "\1\177\13\0\2\u0281\10\0\1\u0282\2\0\1\u0281\1\0"+
    "\4\u0281\23\0\1\276\2\u0283\10\276\1\u0284\1\336\1\276"+
    "\1\u0283\1\276\4\u0283\10\276\1\302\13\276\2\u0283\10\276"+
    "\1\u0285\2\276\1\u0283\1\276\4\u0283\23\276\1\0\2\u0273"+
    "\10\0\1\u0274\1\202\1\0\1\u0273\1\0\4\u0273\23\0"+
    "\1\210\2\u0286\10\210\1\u0287\1\307\1\247\1\u0286\1\210"+
    "\4\u0286\10\210\1\212\13\210\2\u0286\10\210\1\u0287\1\210"+
    "\1\247\1\u0286\1\210\4\u0286\23\210\1\0\2\u0288\10\0"+
    "\1\u0289\1\272\1\0\1\u0288\1\0\4\u0288\10\0\1\177"+
    "\13\0\2\u0288\10\0\1\u0289\2\0\1\u0288\1\0\4\u0288"+
    "\23\0\1\276\2\u028a\10\276\1\u028b\1\336\1\276\1\u028a"+
    "\1\276\4\u028a\10\276\1\302\13\276\2\u028a\10\276\1\u028c"+
    "\2\276\1\u028a\1\276\4\u028a\23\276\1\0\2\u027a\10\0"+
    "\1\u027b\1\202\1\0\1\u027a\1\0\4\u027a\23\0\1\210"+
    "\2\u028d\10\210\1\u028e\1\307\1\247\1\u028d\1\210\4\u028d"+
    "\10\210\1\212\13\210\2\u028d\10\210\1\u028e\1\210\1\247"+
    "\1\u028d\1\210\4\u028d\23\210\1\0\2\u028f\10\0\1\u0290"+
    "\1\272\1\0\1\u028f\1\0\4\u028f\10\0\1\177\13\0"+
    "\2\u028f\10\0\1\u0290\2\0\1\u028f\1\0\4\u028f\23\0"+
    "\1\276\2\u0291\10\276\1\u0292\1\336\1\276\1\u0291\1\276"+
    "\4\u0291\10\276\1\302\13\276\2\u0291\10\276\1\u0293\2\276"+
    "\1\u0291\1\276\4\u0291\23\276\1\0\2\u0281\10\0\1\u0282"+
    "\1\202\1\0\1\u0281\1\0\4\u0281\23\0\1\210\2\u0294"+
    "\10\210\1\u0295\1\307\1\247\1\u0294\1\210\4\u0294\10\210"+
    "\1\212\13\210\2\u0294\10\210\1\u0295\1\210\1\247\1\u0294"+
    "\1\210\4\u0294\23\210\1\0\2\u0296\10\0\1\u0297\1\272"+
    "\1\0\1\u0296\1\0\4\u0296\10\0\1\177\13\0\2\u0296"+
    "\10\0\1\u0297\2\0\1\u0296\1\0\4\u0296\23\0\1\276"+
    "\2\u0298\10\276\1\u0299\1\336\1\276\1\u0298\1\276\4\u0298"+
    "\10\276\1\302\13\276\2\u0298\10\276\1\u029a\2\276\1\u0298"+
    "\1\276\4\u0298\23\276\1\0\2\u0288\10\0\1\u0289\1\202"+
    "\1\0\1\u0288\1\0\4\u0288\23\0\1\210\2\u029b\10\210"+
    "\1\u029c\1\307\1\247\1\u029b\1\210\4\u029b\10\210\1\212"+
    "\13\210\2\u029b\10\210\1\u029c\1\210\1\247\1\u029b\1\210"+
    "\4\u029b\23\210\1\0\2\u029d\11\0\1\272\1\0\1\u029d"+
    "\1\0\4\u029d\10\0\1\177\13\0\2\u029d\13\0\1\u029d"+
    "\1\0\4\u029d\23\0\1\276\2\u029e\10\276\1\u029f\1\336"+
    "\1\276\1\u029e\1\276\4\u029e\10\276\1\302\13\276\2\u029e"+
    "\10\276\1\u02a0\2\276\1\u029e\1\276\4\u029e\23\276\1\0"+
    "\2\u028f\10\0\1\u0290\1\202\1\0\1\u028f\1\0\4\u028f"+
    "\23\0\1\210\2\u02a1\11\210\1\307\1\247\1\u02a1\1\210"+
    "\4\u02a1\10\210\1\212\13\210\2\u02a1\12\210\1\247\1\u02a1"+
    "\1\210\4\u02a1\23\210\14\0\1\272\17\0\1\177\12\0"+
    "\1\276\2\u02a2\10\276\1\u02a3\1\336\1\276\1\u02a2\1\276"+
    "\4\u02a2\10\276\1\302\13\276\2\u02a2\10\276\1\u02a4\2\276"+
    "\1\u02a2\1\276\4\u02a2\23\276\1\0\2\u0296\10\0\1\u0297"+
    "\1\202\1\0\1\u0296\1\0\4\u0296\23\0\14\210\1\307"+
    "\1\247\16\210\1\212\12\210\1\276\2\u02a5\10\276\1\320"+
    "\1\336\1\276\1\u02a5\1\276\4\u02a5\10\276\1\302\13\276"+
    "\2\u02a5\10\276\1\242\2\276\1\u02a5\1\276\4\u02a5\23\276"+
    "\1\0\2\u029d\11\0\1\202\1\0\1\u029d\1\0\4\u029d"+
    "\23\0\13\276\1\320\1\336\17\276\1\302\12\276";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24102];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\2\1\1\11\3\1\1\11\12\1\2\11"+
    "\3\1\1\11\2\1\3\11\2\1\1\11\4\1\1\11"+
    "\12\1\2\0\2\1\1\0\1\11\1\1\3\0\1\1"+
    "\1\11\1\1\1\0\1\1\4\0\1\1\1\11\1\0"+
    "\1\1\1\0\1\11\2\0\1\11\4\1\2\0\1\11"+
    "\1\1\6\0\1\11\2\1\3\0\2\1\12\0\1\1"+
    "\6\0\1\1\3\0\1\11\11\0\1\11\4\1\3\0"+
    "\1\11\1\0\1\11\2\0\1\11\2\1\1\11\1\1"+
    "\1\0\1\1\13\0\1\11\3\1\2\0\1\1\3\0"+
    "\1\1\1\11\3\0\1\11\2\0\1\11\3\0\1\1"+
    "\5\0\1\1\26\0\1\1\22\0\1\1\2\0\1\1"+
    "\76\0\1\1\u0172\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[677];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private String zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private int yycolumn = 0;

  private Stack<Integer> stateStack = new Stack<Integer>();

  private boolean isHeader = false;

  private int currentIndent = 0;

  private Paragraph paragraph = new Paragraph();
  private BlockQuotes blockQuotes = new BlockQuotes();
  private CodeFence codeFence = new CodeFence();
  private ParseDelimited parseDelimited = new ParseDelimited();

  private static class ParseDelimited {
    char exitChar = 0;
    IElementType returnType = null;
    boolean inlinesAllowed = true;
  }

  private static class Paragraph {
    boolean currentLineIsNotBlank = false;
    int lineCount = 0;
  }

  private static class BlockQuotes {
    int level = 0;
    int currentLineLevel = 0;

    void processMarker() {
      currentLineLevel++;
      adjustLevel();
    }

    void adjustLevel() {
      level = Math.max(level, currentLineLevel);
    }

    void resetLevel() {
      level = 0;
    }
  }

  private static class LinkDef {
    boolean wasUrl;
    boolean wasParen;
  }

  private static class CodeFence {
    char fenceChar;
    int fenceLength;
    boolean typeWasRead;
    // for code span
    int spanLength;
  }

  private static class HtmlHelper {
    private static final String BLOCK_TAGS_STRING =
            "article, header, aside, hgroup, blockquote, hr, iframe, body, li, map, button, " +
            "object, canvas, ol, caption, output, col, p, colgroup, pre, dd, progress, div, " +
            "section, dl, table, td, dt, tbody, embed, textarea, fieldset, tfoot, figcaption, " +
            "th, figure, thead, footer, footer, tr, form, ul, h1, h2, h3, h4, h5, h6, video, " +
            "script, style";

    static final Set<String> BLOCK_TAGS = getBlockTagsSet();

    private static Set<String> getBlockTagsSet() {
      Set<String> result = new HashSet<String>();
      String[] tags = BLOCK_TAGS_STRING.split(", ");
      for (String tag : tags) {
        result.add(tag);
      }
      return result;
    }
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case '(': return Token.LPAREN;
      case ')': return Token.RPAREN;
      case '[': return Token.LBRACKET;
      case ']': return Token.RBRACKET;
      case '<': return Token.LT;
      case '>': return Token.GT;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType, boolean allowInlines) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimited.exitChar = last;
    parseDelimited.returnType = contentsType;
//    parseDelimited.inlinesAllowed = allowInlines;
    parseDelimited.inlinesAllowed = true;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void increaseIndent(int delta) {
    currentIndent = Math.max(currentIndent, (yycolumn & 0xffffc) + delta);
  }

  private void recalcIndent() {
    int newIndent = yylength() - 1;
    if (newIndent < currentIndent) {
      currentIndent = newIndent & 0xfffc;
    }
  }

  private boolean isFourIndent() {
    return yycolumn >= currentIndent + 2 * blockQuotes.level + 4;
  }

  private void updateParagraphInfoOnNewline() {
    if (paragraph.currentLineIsNotBlank) {
      paragraph.lineCount++;
      paragraph.currentLineIsNotBlank = false;
    }
    else {
      endParagraph();
      blockQuotes.resetLevel();
    }
  }

  private void endParagraph() {
    paragraph.lineCount = 0;
  }

  private void processEol() {
    updateParagraphInfoOnNewline();

    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    recalcIndent();
    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
    blockQuotes.currentLineLevel = 0;
  }

  private void popState() {
    if (stateStack.isEmpty()) {
      yybegin(AFTER_LINE_START);
    }
    else {
      yybegin(stateStack.pop());
    }
  }

  private void resetState() {
    yypushback(yylength());

    popState();
  }

  private String getTagName() {
    if (yylength() > 1 && yycharat(1) == '/') {
      return yytext().toString().substring(2, yylength() - 1).trim();
    }
    return yytext().toString().substring(1);
  }

  private boolean isBlockTag(String tagName) {
    return HtmlHelper.BLOCK_TAGS.contains(tagName.toLowerCase());
  }

  private boolean canInline() {
    return yystate() == AFTER_LINE_START || yystate() == PARSE_DELIMITED && parseDelimited.inlinesAllowed;
  }

  private IElementType getReturnGeneralized(IElementType defaultType) {
    if (canInline()) {
      return defaultType;
    }
    return parseDelimited.returnType;
  }

  private int countChars(CharSequence s, char c) {
    int result = 0;
    for (int i = 0; i < s.length(); ++i) {
      if (s.charAt(i) == c)
        result++;
    }
    return result;
  }



  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MarkdownLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 104) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(String buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = null;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { int lastSpaces = yytext().toString().indexOf("\n");
    if (lastSpaces >= 2) {
      yypushback(yylength() - lastSpaces);
      return Token.HARD_LINE_BREAK;
    }
    else if (lastSpaces > 0) {
      yypushback(yylength() - lastSpaces);
      return Token.WHITE_SPACE;
    }

    processEol();
    return Token.EOL;
          }
        case 38: break;
        case 31: 
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();
      yybegin(HTML_BLOCK);
      yypushback(yylength());
    }
          }
        case 39: break;
        case 34: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (yycharat(0) == codeFence.fenceChar && yylength() >= codeFence.fenceLength) {
      yybegin(YYINITIAL);
      return Token.CODE_FENCE_END;
    }
    return Token.CODE;
          }
        case 40: break;
        case 36: 
          { return parseDelimited(Token.EMAIL_AUTOLINK, false);
          }
        case 41: break;
        case 32: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();
      return Token.HORIZONTAL_RULE;
    }
          }
        case 42: break;
        case 35: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();
      return Token.HORIZONTAL_RULE;
    }
          }
        case 43: break;
        case 11: 
          { return Token.EXCLAMATION_MARK;
          }
        case 44: break;
        case 29: 
          { return Token.HTML_TAG;
          }
        case 45: break;
        case 24: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isFourIndent()) {
      resetState();
    }
    else {
      isHeader = true;
      endParagraph();
      yybegin(AFTER_LINE_START);

      return Token.ATX_HEADER;
    }
          }
        case 46: break;
        case 33: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 9;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 10;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (isFourIndent()) {
      resetState();
    }
    else {
      endParagraph();

      codeFence.fenceChar = yycharat(0);
      codeFence.fenceLength = yylength();
      codeFence.typeWasRead = false;

      yybegin(CODE_FENCE);
      return Token.CODE_FENCE_START;
    }
          }
        case 47: break;
        case 25: 
          { yybegin(YYINITIAL);
    yypushback(yylength());
          }
        case 48: break;
        case 14: 
          { if (canInline()) {
      return Token.BACKTICK;
    }
    return parseDelimited.returnType;
          }
        case 49: break;
        case 22: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { increaseIndent(4);
    return Token.LIST_BULLET;
          }
        case 50: break;
        case 27: 
          { return getReturnGeneralized(Token.ESCAPED_BACKTICKS);
          }
        case 51: break;
        case 37: 
          { return parseDelimited(Token.AUTOLINK, false);
          }
        case 52: break;
        case 16: 
          { return Token.CODE;
          }
        case 53: break;
        case 26: 
          { return getReturnGeneralized(Token.TEXT);
          }
        case 54: break;
        case 7: 
          { return Token.TEXT;
          }
        case 55: break;
        case 6: 
          { return Token.BAD_CHARACTER;
          }
        case 56: break;
        case 1: 
          { paragraph.currentLineIsNotBlank = true;
    resetState();
          }
        case 57: break;
        case 13: 
          { return getReturnGeneralized(Token.EMPH);
          }
        case 58: break;
        case 28: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isHeader) {
      return Token.ATX_HEADER;
    }
    return Token.TEXT;
          }
        case 59: break;
        case 30: 
          // lookahead expression with fixed lookahead length
          yypushback(2);
          { if (isHeader) {
      return Token.ATX_HEADER;
    }
    return Token.TEXT;
          }
        case 60: break;
        case 5: 
          { return Token.HTML_BLOCK;
          }
        case 61: break;
        case 23: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 7;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 8;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (isFourIndent()) {
      resetState();
    }
    else if (paragraph.lineCount == 1 && blockQuotes.level == blockQuotes.currentLineLevel) {
      return yycharat(0) == '=' ? Token.SETEXT_1 : Token.SETEXT_2;
    }
    else if (yycharat(0) == '-' && yylength() >= 3) {
      endParagraph();
      return Token.HORIZONTAL_RULE;
    }
    else {
      resetState();
    }
          }
        case 62: break;
        case 20: 
          { increaseIndent(4);
    return Token.LIST_NUMBER;
          }
        case 63: break;
        case 2: 
          { if (paragraph.lineCount == 0 && yycolumn + yylength() >= currentIndent + 2 * blockQuotes.currentLineLevel + 4) {
      blockQuotes.resetLevel();
      yybegin(CODE);
    }
    return Token.WHITE_SPACE;
          }
        case 64: break;
        case 10: 
          { return getDelimiterTokenType(yycharat(0));
          }
        case 65: break;
        case 15: 
          { if (yycharat(0) == parseDelimited.exitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimited.returnType;
          }
        case 66: break;
        case 4: 
          { blockQuotes.processMarker();
    return Token.BLOCK_QUOTE;
          }
        case 67: break;
        case 3: 
          { resetState();
          }
        case 68: break;
        case 19: 
          { int newLevel = countChars(yytext(), '>');
    if (newLevel < blockQuotes.level) {
      yypushback(yylength() - 1);
      processEol();
      return Token.EOL;
    }
    else {
      codeFence.typeWasRead = true;
      return Token.CODE;
    }
          }
        case 69: break;
        case 12: 
          { return Token.COLON;
          }
        case 70: break;
        case 8: 
          { return Token.WHITE_SPACE;
          }
        case 71: break;
        case 18: 
          { if (!codeFence.typeWasRead) {
      codeFence.typeWasRead = true;
      return Token.FENCE_LANG;
    }
    return Token.CODE;
          }
        case 72: break;
        case 17: 
          { processEol();
    return Token.EOL;
          }
        case 73: break;
        case 21: 
          { if (isFourIndent()) {
      resetState();
    }
    else {
      String tagName = getTagName();
      if (isBlockTag(tagName)) {
        endParagraph();
        yybegin(HTML_BLOCK);
        yypushback(yylength());
      } else {
        resetState();
      }
    }
          }
        case 74: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
