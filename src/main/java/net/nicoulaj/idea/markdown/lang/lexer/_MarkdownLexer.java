/* The following code was generated by JFlex 1.4.3 on 10/1/14 3:47 AM */

package net.nicoulaj.idea.markdown.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import net.nicoulaj.idea.markdown.lang.MarkdownTokenTypes;

import java.util.Stack;

/* Auto generated File */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/1/14 3:47 AM from the specification file
 * <tt>/Users/valich/work/valich-idea-markdown/src/main/java/net/nicoulaj/idea/markdown/lang/lexer/markdown.flex</tt>
 */
public class _MarkdownLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int CODE = 14;
  public static final int LINK = 8;
  public static final int AFTER_LINE_START = 6;
  public static final int TAG_START = 4;
  public static final int HTML_BLOCK = 2;
  public static final int YYINITIAL = 0;
  public static final int PARSE_DELIMITED = 12;
  public static final int LINK_DEF = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\1\0\1\3\23\0\1\3\1\23\1\5\1\15"+
    "\3\0\1\7\1\26\1\27\1\20\1\16\1\22\1\14\1\17\1\12"+
    "\12\1\1\30\1\0\1\11\1\13\1\10\2\0\32\2\1\24\1\6"+
    "\1\25\1\0\1\21\1\31\32\2\1\22\1\0\1\22\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\12\0\2\1\1\2\1\1\1\3\1\1\2\4\1\5"+
    "\2\1\2\6\1\7\3\10\1\11\3\10\2\12\2\10"+
    "\1\13\1\14\1\15\3\14\1\16\1\17\1\20\1\21"+
    "\1\14\1\22\1\23\1\24\5\0\1\25\4\0\1\26"+
    "\1\27\1\4\1\27\1\0\1\30\3\0\1\31\1\32"+
    "\1\0\1\33\4\0\1\14\1\0\1\14\1\0\1\34"+
    "\1\0\1\14\1\35\7\0\1\36\1\0\1\10\2\0"+
    "\1\37\1\40\2\0\1\34\14\0\1\36\1\0\1\36"+
    "\1\0\1\41\2\0\3\40\11\0\2\36\1\0\1\36"+
    "\12\0\1\36\1\0\1\36\1\42\3\0\1\42\3\0"+
    "\1\42\2\0\1\36\1\0\1\36\2\0\1\42\3\0"+
    "\1\42\2\0\1\42\4\0\1\42\1\0\1\42\2\0"+
    "\1\36\1\0\1\36\7\0\1\42\2\0\1\42\3\0"+
    "\1\42\7\0\1\42\1\0\1\42\1\0\1\42\2\0"+
    "\1\36\1\0\1\36\5\0\1\42\10\0\1\42\1\36"+
    "\1\0\1\36\13\0\1\36\7\0\2\42\1\0\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\32\0\64\0\116\0\150\0\202\0\234\0\266"+
    "\0\320\0\352\0\u0104\0\u011e\0\u0138\0\u0152\0\u0104\0\u016c"+
    "\0\u0186\0\u01a0\0\u01ba\0\u01d4\0\u01ee\0\u0104\0\u0208\0\u0104"+
    "\0\u0104\0\u0222\0\u023c\0\u0256\0\u0270\0\u028a\0\u02a4\0\u02be"+
    "\0\u02d8\0\u02f2\0\u030c\0\u0326\0\u0340\0\u035a\0\u0374\0\u038e"+
    "\0\u03a8\0\u0340\0\u0340\0\u0104\0\u0104\0\u03c2\0\u0340\0\u03dc"+
    "\0\u0104\0\u03f6\0\u0410\0\u042a\0\u0444\0\u011e\0\u0104\0\u0152"+
    "\0\u045e\0\u0478\0\u0492\0\u016c\0\u0104\0\u04ac\0\u045e\0\u04c6"+
    "\0\u04e0\0\u04fa\0\u0222\0\u0514\0\u028a\0\u0104\0\u02a4\0\u0104"+
    "\0\u052e\0\u030c\0\u0548\0\u0562\0\u057c\0\u0596\0\u05b0\0\u05ca"+
    "\0\u0340\0\u05e4\0\u05fe\0\u0104\0\u0410\0\u0618\0\u0632\0\u064c"+
    "\0\u0666\0\u0680\0\u069a\0\u06b4\0\u06ce\0\u0514\0\u06e8\0\u0702"+
    "\0\u052e\0\u0104\0\u071c\0\u0736\0\u0104\0\u0750\0\u076a\0\u0784"+
    "\0\u079e\0\u07b8\0\u07d2\0\u07ec\0\u0806\0\u0820\0\u083a\0\u0854"+
    "\0\u086e\0\u0888\0\u08a2\0\u08bc\0\u08d6\0\u0104\0\u08f0\0\u090a"+
    "\0\u0562\0\u0596\0\u05e4\0\u0924\0\u093e\0\u0958\0\u0972\0\u098c"+
    "\0\u09a6\0\u09c0\0\u09da\0\u09f4\0\u0a0e\0\u0a28\0\u0a42\0\u0a5c"+
    "\0\u0a76\0\u0a90\0\u0aaa\0\u0ac4\0\u0ade\0\u0af8\0\u0b12\0\u0b2c"+
    "\0\u0b46\0\u0b60\0\u0b7a\0\u0b94\0\u0bae\0\u0104\0\u0bc8\0\u0be2"+
    "\0\u0bfc\0\u0a90\0\u0c16\0\u0c30\0\u0c4a\0\u0aaa\0\u0c64\0\u0c7e"+
    "\0\u0c98\0\u0cb2\0\u0ccc\0\u0ce6\0\u0d00\0\u052e\0\u0d1a\0\u0d34"+
    "\0\u0d4e\0\u0be2\0\u0d68\0\u0d82\0\u0bfc\0\u0d9c\0\u0db6\0\u0dd0"+
    "\0\u0dea\0\u0c30\0\u0e04\0\u0c4a\0\u0e1e\0\u0e38\0\u0e52\0\u0e6c"+
    "\0\u0e86\0\u0ea0\0\u0eba\0\u0ed4\0\u0eee\0\u0f08\0\u0f22\0\u0f3c"+
    "\0\u0ce6\0\u0f56\0\u0f70\0\u0d34\0\u0f8a\0\u0fa4\0\u0fbe\0\u0d00"+
    "\0\u0fd8\0\u0ff2\0\u100c\0\u1026\0\u1040\0\u105a\0\u1074\0\u0d9c"+
    "\0\u108e\0\u0dea\0\u10a8\0\u0db6\0\u10c2\0\u10dc\0\u10f6\0\u1110"+
    "\0\u112a\0\u1144\0\u115e\0\u1178\0\u1192\0\u11ac\0\u0f3c\0\u11c6"+
    "\0\u11e0\0\u11fa\0\u1214\0\u122e\0\u1248\0\u1262\0\u127c\0\u1074"+
    "\0\u1296\0\u12b0\0\u12ca\0\u12e4\0\u12fe\0\u1318\0\u1332\0\u134c"+
    "\0\u1366\0\u1380\0\u139a\0\u13b4\0\u13ce\0\u13e8\0\u1402\0\u141c"+
    "\0\u1436\0\u1450\0\u146a\0\u1484\0\u149e\0\u14b8\0\u1026\0\u1040"+
    "\0\u14d2\0\u1262";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\13\1\14\1\13\1\15\2\13\1\16\1\13\1\17"+
    "\1\20\1\13\1\21\1\22\1\23\1\24\1\13\1\25"+
    "\11\13\11\26\1\27\20\26\4\30\1\0\25\30\1\31"+
    "\2\32\1\33\1\34\1\31\1\35\2\31\1\36\3\31"+
    "\1\37\2\31\1\40\1\41\1\31\1\42\1\43\4\31"+
    "\1\44\3\45\1\46\1\13\1\47\1\45\1\50\2\13"+
    "\12\45\1\51\1\45\1\52\1\53\5\45\1\46\1\13"+
    "\1\47\1\45\1\50\1\54\1\55\14\45\1\56\1\45"+
    "\1\57\1\45\4\60\1\13\25\60\4\61\1\34\25\61"+
    "\23\0\1\62\1\63\13\0\1\64\20\0\1\65\35\0"+
    "\1\66\15\0\1\67\15\0\1\15\2\0\1\70\11\0"+
    "\1\71\25\0\1\72\4\0\1\73\11\0\2\74\42\0"+
    "\1\21\21\0\1\75\10\0\1\76\32\0\1\23\17\0"+
    "\1\75\31\0\1\77\14\0\1\100\12\0\2\101\7\0"+
    "\1\102\20\0\2\32\1\103\31\0\1\33\14\0\2\104"+
    "\13\0\2\34\33\0\1\31\5\0\14\31\1\0\1\31"+
    "\1\0\2\105\33\0\1\106\10\0\1\107\34\0\1\110"+
    "\32\0\1\110\34\0\1\111\5\0\1\111\3\112\1\0"+
    "\17\111\1\0\1\113\4\111\31\0\1\44\3\45\2\0"+
    "\3\45\2\0\20\45\3\0\1\46\26\0\3\47\1\114"+
    "\1\0\1\45\1\115\1\47\2\114\20\47\3\50\1\116"+
    "\1\0\1\50\1\117\1\45\2\116\20\50\1\45\2\51"+
    "\1\120\1\0\3\45\2\0\13\45\1\121\4\45\3\56"+
    "\1\122\1\0\1\56\1\123\1\56\2\122\15\56\1\45"+
    "\2\56\4\124\1\0\25\124\24\0\1\63\5\0\4\63"+
    "\1\0\17\63\1\0\1\125\4\63\25\0\1\126\4\0"+
    "\3\127\1\65\1\0\1\130\1\127\1\131\2\0\20\127"+
    "\3\0\1\71\14\0\1\100\14\0\1\72\10\0\1\132"+
    "\36\0\1\133\24\0\1\76\20\0\1\100\14\0\1\134"+
    "\12\0\2\101\30\0\2\135\32\0\1\136\26\0\4\111"+
    "\1\0\17\111\1\0\1\137\7\111\1\137\1\0\1\111"+
    "\1\140\15\111\1\0\1\137\2\111\1\141\1\111\4\114"+
    "\1\0\1\142\1\143\23\114\3\47\1\114\1\0\1\47"+
    "\1\115\1\47\2\114\20\47\4\116\1\0\1\116\1\144"+
    "\1\142\22\116\3\50\1\116\1\0\1\50\1\117\1\50"+
    "\2\116\20\50\1\0\3\120\21\0\1\145\4\0\4\122"+
    "\1\0\1\122\1\146\20\122\1\142\2\122\3\56\1\122"+
    "\1\0\1\56\1\123\1\56\2\122\20\56\1\0\3\126"+
    "\20\0\1\147\5\0\3\127\1\150\1\0\3\127\2\0"+
    "\14\127\1\151\3\127\3\130\1\152\1\0\1\153\2\130"+
    "\2\154\14\130\1\155\3\130\3\131\1\156\1\0\2\131"+
    "\1\157\2\160\14\131\1\161\3\131\3\0\1\132\10\0"+
    "\1\162\36\0\1\163\13\0\1\134\14\0\1\164\12\0"+
    "\2\135\1\165\4\0\1\166\21\0\3\111\1\137\1\0"+
    "\1\111\1\140\15\111\1\0\1\137\10\111\1\0\17\111"+
    "\1\167\1\137\1\170\3\111\4\114\1\0\1\171\1\143"+
    "\23\114\4\116\1\0\1\116\1\144\1\172\22\116\4\122"+
    "\1\0\1\122\1\146\20\122\1\173\2\122\6\0\1\174"+
    "\26\0\1\150\22\0\1\147\3\0\3\127\1\150\1\0"+
    "\1\127\1\175\1\127\2\0\14\127\1\151\3\127\3\154"+
    "\1\152\1\0\1\176\20\154\1\177\3\154\3\127\1\200"+
    "\1\0\1\127\1\130\1\127\2\0\14\127\1\151\3\127"+
    "\4\154\1\0\1\176\24\154\3\130\1\152\1\0\1\153"+
    "\1\201\1\130\2\154\14\130\1\155\3\130\3\160\1\156"+
    "\1\0\2\160\1\202\16\160\1\203\3\160\3\127\1\200"+
    "\1\0\1\127\1\131\1\127\2\0\14\127\1\151\3\127"+
    "\4\160\1\0\2\160\1\202\22\160\3\131\1\156\1\0"+
    "\1\131\1\204\1\157\2\160\14\131\1\161\3\131\3\0"+
    "\1\162\10\0\1\205\23\0\1\206\12\0\1\207\13\0"+
    "\1\164\14\0\1\210\14\0\1\165\4\0\1\166\22\0"+
    "\3\167\21\0\1\211\4\0\3\212\1\170\1\0\3\212"+
    "\2\111\12\212\1\213\1\214\4\212\3\0\1\174\26\0"+
    "\3\127\1\215\1\0\3\127\2\0\14\127\1\151\6\127"+
    "\1\216\1\0\1\127\1\130\1\127\2\0\20\127\4\154"+
    "\1\0\1\176\1\217\23\154\3\127\1\200\1\0\3\127"+
    "\2\0\14\127\1\151\3\127\3\130\1\220\1\0\1\153"+
    "\2\130\2\154\14\130\1\155\3\130\3\127\1\216\1\0"+
    "\1\127\1\131\1\127\2\0\20\127\4\160\1\0\1\160"+
    "\1\221\1\202\22\160\3\131\1\222\1\0\2\131\1\157"+
    "\2\160\14\131\1\161\3\131\3\0\1\205\10\0\1\223"+
    "\20\0\1\206\34\0\1\206\12\0\1\224\13\0\1\210"+
    "\14\0\1\225\17\0\1\226\23\0\3\212\1\227\1\0"+
    "\1\230\1\212\1\231\2\111\12\212\1\213\1\214\1\212"+
    "\1\232\2\212\3\213\1\233\1\0\1\234\1\213\1\235"+
    "\2\0\15\213\1\236\2\213\3\212\1\237\1\0\1\230"+
    "\1\240\1\231\2\111\12\212\1\213\1\214\1\212\1\232"+
    "\2\212\3\0\1\215\22\0\1\147\3\0\3\127\1\216"+
    "\1\0\3\127\2\0\20\127\3\154\1\217\1\0\1\176"+
    "\27\154\1\220\1\0\1\176\20\154\1\177\3\154\3\160"+
    "\1\221\1\0\2\160\1\202\25\160\1\222\1\0\2\160"+
    "\1\202\16\160\1\203\3\160\3\0\1\223\10\0\1\241"+
    "\23\0\1\206\12\0\1\242\13\0\1\225\14\0\1\243"+
    "\11\0\3\111\1\227\1\0\1\244\1\111\1\245\14\111"+
    "\1\0\1\137\1\111\1\246\2\111\3\230\1\247\1\0"+
    "\2\230\1\250\2\244\12\230\1\234\1\251\1\230\1\252"+
    "\2\230\3\231\1\253\1\0\1\250\2\231\2\245\12\231"+
    "\1\235\1\254\1\231\1\255\2\231\3\0\1\233\1\0"+
    "\1\256\1\0\1\257\17\0\1\226\2\0\3\234\1\260"+
    "\1\0\2\234\1\261\2\256\15\234\1\262\2\234\3\235"+
    "\1\263\1\0\1\261\2\235\2\257\15\235\1\264\2\235"+
    "\3\111\1\237\1\0\1\244\1\140\1\245\14\111\1\0"+
    "\1\137\1\111\1\246\2\111\3\212\1\227\1\0\1\230"+
    "\1\212\1\231\2\111\12\212\1\265\1\214\1\266\1\232"+
    "\2\212\3\0\1\241\10\0\1\267\23\0\1\206\12\0"+
    "\1\270\13\0\1\243\14\0\1\271\11\0\4\244\1\0"+
    "\1\272\1\273\15\244\1\256\1\274\4\244\4\245\1\0"+
    "\1\245\1\275\1\272\14\245\1\257\1\276\4\245\3\244"+
    "\1\247\1\0\1\277\1\273\1\300\14\244\1\256\1\274"+
    "\1\244\1\301\2\244\3\250\1\302\1\0\3\250\2\300"+
    "\12\250\1\261\1\303\1\250\1\304\2\250\3\230\1\305"+
    "\1\0\1\230\1\306\1\250\2\244\12\230\1\234\1\251"+
    "\1\230\1\252\2\230\3\245\1\253\1\0\1\300\1\275"+
    "\1\307\14\245\1\257\1\276\1\245\1\310\2\245\3\231"+
    "\1\311\1\0\1\250\1\312\1\231\2\245\12\231\1\235"+
    "\1\254\1\231\1\255\2\231\4\256\1\0\1\313\1\314"+
    "\23\256\4\257\1\0\1\257\1\315\1\313\22\257\3\256"+
    "\1\260\1\0\1\316\1\314\1\317\17\256\1\320\2\256"+
    "\3\261\1\321\1\0\3\261\2\317\15\261\1\322\2\261"+
    "\3\257\1\263\1\0\1\317\1\315\1\323\17\257\1\324"+
    "\2\257\1\213\2\265\1\325\1\0\1\234\1\213\1\235"+
    "\2\0\13\213\1\326\1\213\1\236\2\213\3\212\1\266"+
    "\1\0\1\230\1\212\1\231\2\111\12\212\1\213\1\214"+
    "\1\212\1\232\2\212\3\0\1\267\10\0\1\327\23\0"+
    "\1\206\12\0\1\330\13\0\1\271\14\0\1\331\11\0"+
    "\3\111\1\272\1\0\17\111\1\0\1\137\1\111\1\246"+
    "\2\111\4\244\1\0\1\277\1\273\15\244\1\256\1\274"+
    "\7\244\1\274\1\0\1\272\1\332\15\244\1\256\1\274"+
    "\4\244\4\245\1\0\1\245\1\275\1\307\14\245\1\257"+
    "\1\276\7\245\1\276\1\0\1\245\1\333\1\272\14\245"+
    "\1\257\1\276\4\245\3\244\1\277\1\0\1\272\1\273"+
    "\15\244\1\256\1\274\1\244\1\301\2\244\4\300\1\0"+
    "\1\307\1\334\1\277\14\300\1\317\1\335\7\300\1\302"+
    "\1\0\1\336\1\334\1\336\14\300\1\317\1\335\1\300"+
    "\1\337\2\300\3\250\1\340\1\0\1\250\1\341\1\250"+
    "\2\300\12\250\1\261\1\303\1\250\1\304\2\250\3\244"+
    "\1\305\1\0\1\277\1\332\1\300\14\244\1\256\1\274"+
    "\1\244\1\301\2\244\3\230\1\247\1\0\2\230\1\250"+
    "\2\244\12\230\1\342\1\251\1\343\1\252\2\230\3\245"+
    "\1\307\1\0\1\245\1\275\1\272\14\245\1\257\1\276"+
    "\1\245\1\310\5\245\1\311\1\0\1\300\1\333\1\307"+
    "\14\245\1\257\1\276\1\245\1\310\2\245\3\231\1\253"+
    "\1\0\1\250\2\231\2\245\12\231\1\344\1\254\1\345"+
    "\1\255\2\231\3\0\1\313\23\0\1\226\2\0\4\256"+
    "\1\0\1\316\1\314\23\256\4\257\1\0\1\257\1\315"+
    "\1\323\22\257\3\256\1\316\1\0\1\313\1\314\20\256"+
    "\1\320\2\256\4\317\1\0\1\323\1\346\1\316\25\317"+
    "\1\321\1\0\1\347\1\346\1\347\17\317\1\350\2\317"+
    "\3\257\1\323\1\0\1\257\1\315\1\313\17\257\1\324"+
    "\2\257\1\0\2\167\1\325\1\0\1\256\1\0\1\257"+
    "\15\0\1\211\1\0\1\226\2\0\3\213\1\233\1\0"+
    "\1\234\1\236\1\235\2\0\15\213\1\236\2\213\3\0"+
    "\1\327\10\0\1\351\23\0\1\206\12\0\1\352\13\0"+
    "\1\331\14\0\1\353\11\0\4\244\1\0\1\277\1\273"+
    "\15\244\1\354\1\274\1\355\3\244\4\245\1\0\1\245"+
    "\1\275\1\307\14\245\1\356\1\276\1\357\3\245\4\300"+
    "\1\0\1\336\1\334\1\336\14\300\1\317\1\335\7\300"+
    "\1\335\1\0\1\307\1\360\1\277\14\300\1\317\1\335"+
    "\7\300\1\336\1\0\1\307\1\334\1\277\14\300\1\317"+
    "\1\335\1\300\1\337\5\300\1\340\1\0\1\336\1\360"+
    "\1\336\14\300\1\317\1\335\1\300\1\337\2\300\3\250"+
    "\1\302\1\0\3\250\2\300\12\250\1\361\1\303\1\362"+
    "\1\304\2\250\1\234\2\342\1\363\1\0\2\234\1\261"+
    "\2\256\13\234\1\364\1\234\1\262\2\234\3\230\1\343"+
    "\1\0\2\230\1\250\2\244\12\230\1\234\1\251\1\230"+
    "\1\252\2\230\1\235\2\344\1\365\1\0\1\261\2\235"+
    "\2\257\13\235\1\366\1\235\1\264\2\235\3\231\1\345"+
    "\1\0\1\250\2\231\2\245\12\231\1\235\1\254\1\231"+
    "\1\255\2\231\4\317\1\0\1\347\1\346\1\347\25\317"+
    "\1\347\1\0\1\323\1\346\1\316\17\317\1\350\2\317"+
    "\3\0\1\351\10\0\1\367\23\0\1\206\12\0\1\370"+
    "\13\0\1\353\14\0\1\206\11\0\1\256\3\354\1\0"+
    "\1\313\1\314\16\256\1\371\4\256\3\230\1\355\1\0"+
    "\1\212\2\230\2\244\12\230\1\234\1\251\4\230\1\257"+
    "\3\356\1\0\1\257\1\315\1\313\15\257\1\372\4\257"+
    "\3\231\1\357\1\0\2\231\1\212\2\245\12\231\1\235"+
    "\1\254\4\231\4\300\1\0\1\336\1\334\1\336\14\300"+
    "\1\373\1\335\1\374\3\300\1\261\2\361\1\375\1\0"+
    "\3\261\2\317\13\261\1\376\1\261\1\322\2\261\3\250"+
    "\1\362\1\0\3\250\2\300\12\250\1\261\1\303\1\250"+
    "\1\304\2\250\1\256\2\354\1\363\1\0\1\316\1\314"+
    "\1\317\15\256\1\371\1\256\1\320\2\256\3\234\1\260"+
    "\1\0\1\234\1\262\1\261\2\256\15\234\1\262\2\234"+
    "\1\257\2\356\1\365\1\0\1\317\1\315\1\323\15\257"+
    "\1\372\1\257\1\324\2\257\3\235\1\263\1\0\1\261"+
    "\1\264\1\235\2\257\15\235\1\264\2\235\3\0\1\367"+
    "\10\0\1\206\23\0\1\206\23\0\4\256\1\0\1\313"+
    "\1\377\23\256\4\257\1\0\1\257\1\u0100\1\313\22\257"+
    "\1\317\3\373\1\0\1\323\1\346\1\316\15\317\1\u0101"+
    "\4\317\3\250\1\374\1\0\1\231\1\250\1\230\2\300"+
    "\12\250\1\261\1\303\4\250\1\317\2\373\1\375\1\0"+
    "\1\347\1\346\1\347\15\317\1\u0101\1\317\1\350\2\317"+
    "\3\261\1\321\1\0\1\261\1\322\1\261\2\317\15\261"+
    "\1\322\2\261\4\317\1\0\1\323\1\u0102\1\316\22\317";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5356];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\12\0\1\11\3\1\1\11\6\1\1\11\1\1\2\11"+
    "\22\1\2\11\3\1\1\11\5\0\1\11\4\0\1\1"+
    "\1\11\2\1\1\0\1\1\3\0\1\1\1\11\1\0"+
    "\1\11\4\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\11\1\1\6\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\11\2\0\1\11\14\0\1\1\1\0\1\1"+
    "\1\0\1\11\2\0\5\1\3\0\1\1\2\0\3\1"+
    "\1\0\1\1\4\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\11\3\0\1\1\3\0\1\1\2\0\1\1\1\0"+
    "\1\1\2\0\1\1\3\0\1\1\2\0\1\1\4\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\7\0"+
    "\1\1\2\0\1\1\3\0\1\1\7\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\5\0"+
    "\1\1\10\0\2\1\1\0\1\1\13\0\1\1\7\0"+
    "\2\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[258];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** For the backwards DFA of general lookahead statements */
  private boolean [] zzFin = new boolean [ZZ_BUFFERSIZE+1];

  /* user code: */
  private static class Token implements MarkdownTokenTypes {}

  private int yycolumn = 0;

  private Stack<Integer> stateStack = new Stack<Integer>();

  char parseDelimitedExitChar = 0;
  IElementType parseDelimitedReturnType = null;

  boolean isHeader = false;

  int currentIndent = 0;

  private String getTagNameFromTagEnd() {
    int until = 1;

    char c = 0;
    do {
      until++;
      c = yycharat(until);
    } while (Character.isLetter(c) || Character.isDigit(c));

    return yytext().toString().substring(2, until);
  }

  private static IElementType getDelimiterTokenType(char c) {
    switch (c) {
      case '"': return Token.DOUBLE_QUOTE;
      case '\'': return Token.SINGLE_QUOTE;
      case ')': return Token.RPAREN;
      case ']': return Token.RBRACKET;
      default: return Token.BAD_CHARACTER;
    }
  }

  private IElementType parseDelimited(IElementType contentsType) {
    char first = yycharat(0);
    char last = yycharat(yylength() - 1);

    stateStack.push(yystate());

    parseDelimitedExitChar = last;
    parseDelimitedReturnType = contentsType;

    yybegin(PARSE_DELIMITED);

    yypushback(yylength() - 1);
    return getDelimiterTokenType(first);
  }

  private void increaseIndent() {
    currentIndent = Math.max(currentIndent, (yycolumn & 0xffffc) + 4);
  }

  private void recalcIndent() {
    int newIndent = yylength() - 1;
    if (newIndent < currentIndent) {
      currentIndent = newIndent & 0xfffc;
    }
  }

  private void processEol() {
    int newlinePos = 1;
    while (newlinePos < yylength() && yycharat(newlinePos) != '\n') {
      newlinePos++;
    }

    // there is always one at 0 so that means there are two at least
    if (newlinePos != yylength()) {
      yypushback(yylength() - newlinePos);
      return;
    }

    recalcIndent();
    yybegin(YYINITIAL);
    yypushback(yylength() - 1);

    isHeader = false;
  }

  private void resetState() {
    yypushback(yylength());
    yybegin(AFTER_LINE_START);
  }

  private boolean isBlockTag(String tagName) {
    return true;
  }

  private void processTagStart() {
  }

  private boolean processTagEnd(String tagName) {
    return true;
  }



  public _MarkdownLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public _MarkdownLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 78) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch ((zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL] : zzBufferL.charAt(zzCurrentPosL))) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 31: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { yybegin(LINK_DEF);
    return parseDelimited(Token.LINK_ID);
          }
        case 35: break;
        case 26: 
          // lookahead expression with fixed lookahead length
          yypushback(1);
          { if (isHeader) {
      return Token.ATX_HEADER;
    }
    return Token.TEXT;
          }
        case 36: break;
        case 14: 
          { return Token.LPAREN;
          }
        case 37: break;
        case 6: 
          { return Token.HTML_BLOCK;
          }
        case 38: break;
        case 16: 
          { return Token.GT;
          }
        case 39: break;
        case 18: 
          { return Token.COLON;
          }
        case 40: break;
        case 10: 
          { return Token.EMPH;
          }
        case 41: break;
        case 3: 
          { return Token.BLOCK_QUOTE;
          }
        case 42: break;
        case 28: 
          { yybegin(AFTER_LINE_START);
    return parseDelimited(Token.LINK_ID);
          }
        case 43: break;
        case 27: 
          { return Token.STRONG;
          }
        case 44: break;
        case 11: 
          { return Token.BACKTICK;
          }
        case 45: break;
        case 7: 
          { return Token.BAD_CHARACTER;
          }
        case 46: break;
        case 23: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { increaseIndent();
    return Token.LIST_BULLET;
          }
        case 47: break;
        case 12: 
          { return Token.URL;
          }
        case 48: break;
        case 25: 
          { yybegin(TAG_START);
    return Token.TAG_NAME;
          }
        case 49: break;
        case 30: 
          { return Token.HORIZONTAL_RULE;
          }
        case 50: break;
        case 4: 
          { return yycharat(0) == '=' ? Token.SETEXT_1 : Token.SETEXT_2;
          }
        case 51: break;
        case 32: 
          { return parseDelimited(Token.TEXT);
          }
        case 52: break;
        case 21: 
          { increaseIndent();
    return Token.LIST_NUMBER;
          }
        case 53: break;
        case 20: 
          { return Token.CODE;
          }
        case 54: break;
        case 29: 
          { if (yycharat(0) == '\\') {
      return parseDelimitedReturnType;
    }
    yypushback(1);
    if (yycharat(0) == parseDelimitedExitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimitedReturnType;
          }
        case 55: break;
        case 22: 
          { String tagName = yytext().toString().substring(1);
    if (isBlockTag(tagName)) {
      processTagStart();
      yybegin(HTML_BLOCK);
    } else {
      yybegin(TAG_START);
    }
    return Token.TAG_NAME;
          }
        case 56: break;
        case 24: 
          { processTagStart();
    return Token.HTML_BLOCK;
          }
        case 57: break;
        case 5: 
          { isHeader = true;
    return Token.ATX_HEADER;
          }
        case 58: break;
        case 9: 
          { processEol();
    return Token.EOL;
          }
        case 59: break;
        case 8: 
          { return Token.TEXT;
          }
        case 60: break;
        case 15: 
          { yybegin(AFTER_LINE_START);
    return Token.RPAREN;
          }
        case 61: break;
        case 19: 
          { if (yycharat(0) == parseDelimitedExitChar) {
      yybegin(stateStack.pop());
      return getDelimiterTokenType(yycharat(0));
    }
    return parseDelimitedReturnType;
          }
        case 62: break;
        case 33: 
          { String tagName = getTagNameFromTagEnd();
    if (processTagEnd(tagName)) {
      yybegin(YYINITIAL);
    }
    return Token.HTML_BLOCK;
          }
        case 63: break;
        case 2: 
          { if (yycolumn + yylength() >= currentIndent + 4) {
      yybegin(CODE);
    }
    return Token.WHITE_SPACE;
          }
        case 64: break;
        case 34: 
          // general lookahead, find correct zzMarkedPos
          { int zzFState = 8;
            int zzFPos = zzStartRead;
            if (zzFin.length <= (zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())) { zzFin = new boolean[(zzBufferArrayL != null ? zzBufferArrayL.length : zzBufferL.length())+1]; }
            boolean zzFinL[] = zzFin;
            while (zzFState != -1 && zzFPos < zzMarkedPos) {
              if ((zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzFPos++] : zzBufferL.charAt(zzFPos++));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            }
            if (zzFState != -1 && (zzAttrL[zzFState] & 1) == 1) { zzFinL[zzFPos] = true; } 

            zzFState = 9;
            zzFPos = zzMarkedPos;
            while (!zzFinL[zzFPos] || (zzAttrL[zzFState] & 1) != 1) {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[--zzFPos] : zzBufferL.charAt(--zzFPos));
              zzFState = zzTransL[ zzRowMapL[zzFState] + zzCMapL[zzInput] ];
            };
            zzMarkedPos = zzFPos;
          }
          { if (yycharat(0) == '!') {
      yypushback(1);
      return Token.EXCLAMATION_MARK;
    }

    yybegin(LINK);
    return parseDelimited(Token.TEXT);
          }
        case 65: break;
        case 13: 
          { return Token.WHITE_SPACE;
          }
        case 66: break;
        case 17: 
          { return Token.LT;
          }
        case 67: break;
        case 1: 
          { resetState();
          }
        case 68: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
